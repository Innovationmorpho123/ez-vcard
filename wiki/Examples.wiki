#summary Examples of how to use ez-vcard
#labels Featured

<wiki:toc max_depth="2"/>

=1 Reading=

_See [ReadingVCards Reading vCards] page for more info._

==Example 1.1: Reading from a plain-text vCard==

{{{
String text =
"BEGIN:vcard\r\n" +
"VERSION:3.0\r\n" +
"N:House;Gregory;;Dr;MD\r\n" +
"FN:Dr. Gregory House M.D.\r\n" +
"END:vcard\r\n";

VCard vcard = Ezvcard.parse(text).first();
}}}

==Example 1.2: Reading from an XML document (xCard)==

{{{
String xml =
"<vcards xmlns=\"urn:ietf:params:xml:ns:vcard-4.0\">" +
  "<vcard>" +
    "<n>" +
      "<surname>House</surname>" +
      "<given>Gregory</given>" +
      "<prefix>Dr</prefix>" +
      "<suffix>MD</suffix>" +
    "</n>" +
    "<fn><text>Dr. Gregory House M.D.</text></fn>" +
  "</vcard>" +
"</vcards>";

VCard vcard = Ezvcard.parseXml(xml).first();
}}}

==Example 1.3: Reading from an HTML document (hCard)==

{{{
String html =
"<html>" +
  "<head><link rel=\"profile\" href=\"http://microformats.org/profile/hcard\" /></head>" +
  "<body>" +
    "<div class=\"vcard\">"
      "<h1 class=\"fn\">Dr. Gregory House M.D.</h1>" +
      "<div class=\"n\">" +
        "<span class=\"prefix\">Dr</span> " + 
        "<span class=\"given-name\">Gregory</span> " + 
        "<span class=\"family-name\">House</span> " +
        "<span class=\"suffix\">MD</span>" +
      "</div>" +
    "</div>" +
  "</body>" +
"</html>";

VCard vcard = Ezvcard.parsHtml(html).first();
}}}

==Example 1.4: Reading from a file==

{{{
File file = new File("vcard.vcf");
VCard vcard = Ezvcard.parse(file).first();
}}}

==Example 1.5: Reading from a `Reader`==

{{{
Reader reader = ...
VCard vcard = Ezvcard.parse(reader).first();
}}}

==Example 1.6: Reading multiple vCards from the same stream==

{{{
Reader reader = ...
List<VCard> vcards = Ezvcard.parse(reader).all();
}}}

=2 Writing=

_See [WritingVCards Writing vCards] page for more info._

==Example 2.1: Writing a plain-text vCard==

{{{
VCard vcard = new VCard();

StructuredNameType n = new StructuredNameType();
n.setFamily("House");
n.setGiven("Gregory");
n.addPrefix("Dr");
n.addSuffix("MD");
vcard.setStructuredName(n);

vcard.setFormattedName("Dr. Gregory House M.D.");

String text = Ezvcard.write(vcard).version(VCardVersion.V3_0).go();
}}}

==Example 2.2: Writing to an XML document (xCard)==

{{{
VCard vcard = ...
String xml = Ezvcard.writeXml(vcard).go();
}}}

==Example 2.3: Writing to an HTML document (hCard)==

{{{
VCard vcard = ...
String html = Ezvcard.writeHtml(vcard).go();
}}}

==Example 2.4: Writing to a file==

{{{
VCard vcard = ...
File file = new File("vcard.vcf");
Ezvcard.write(vcard).go(file);
}}}

==Example 2.5: Writing to a `Writer`==

{{{
VCard vcard = ...
Writer writer = ...
Ezvcard.write(vcard).go(writer);
writer.close();
}}}

==Example 2.6: Writing multiple vCards to the same stream==

{{{
Collection<VCard> vcards = ...
Writer writer = ...
Ezvcard.write(vcards).go(writer);
}}}

=3 Extended (non-standard) properties=

_See [ExtendedProperties Extended Properties] page for more info._

==Example 3.1: Getting an extended  property==

{{{
VCard vcard = ...
List<RawType> managers = vcard.getExtendedType("X-MS-MANAGER");
for (RawType manager : managers){
  System.out.println(manager.getValue());
}
}}}

==Example 3.2: Setting an extended property==

{{{
VCard vcard = ...
vcard.addExtendedType("X-MS-MANAGER", "Michael Scott");
}}}

=4 Extended (non-standard) parameters=

==Example 4.1: Getting an extended parameter ==

{{{
VCard vcard = ...
GeoType geo = vcard.getGeo();
Set<String> vacation = geo.getSubTypes().get("X-VACATION");
}}}

==Example 4.2: Setting an extended parameter==
{{{
GeoType geo = new GeoType(21.306944,-157.858333);
geo.getSubTypes().put("X-VACATION", "true");
}}}

=5 Misc=

==Example 5.1: Converting a vCard from one version to another==
{{{
File fromFile = new File("vcard-2.1.vcf");
File toFile = new File("vcard-4.0.vcf");

VCard vcard = Ezvcard.parse(fromFile).first();
Ezvcard.write(vcard).version(VCardVersion.V4_0).go(toFile);
}}}

==Exmaple 5.2: Creating a vCard==

The code below generates a complete vCard, encoding it in plain text and XML formats.

The program prints out any version compatibility warnings it encounters during the marshalling process.  In this case, 3 warnings will be returned when marshalling to plain text.  These warnings point out that the KIND, GENDER, and LANG properties are not supported by vCard version 3.0, which is the version that the plain text vCard is being marshalled to.  The XML marshalling code does not specify a version because XML-encoded vCards only support one version (4.0).

{{{
import java.io.*;
import java.util.*;

import ezvcard.*;
import ezvcard.parameters.*;
import ezvcard.types.*;

public class JohnDoeVCard {
  public static void main(String[] args) throws Exception {
    VCard vcard = new VCard();

    vcard.setKind(KindType.individual());

    vcard.setGender(GenderType.male());

    vcard.addLanguage("en-US");

    StructuredNameType n = new StructuredNameType();
    n.setFamily("Doe");
    n.setGiven("Jonathan");
    n.addPrefix("Mr");
    vcard.setStructuredName(n);

    vcard.setFormattedName("Jonathan Doe");

    vcard.setNickname("John", "Jonny");

    vcard.addTitle("Widget Engineer");

    vcard.setOrganization("Acme Co. Ltd.", "Widget Department");

    AddressType adr = new AddressType();
    adr.setStreetAddress("123 Wall St.");
    adr.setLocality("New York");
    adr.setRegion("NY");
    adr.setPostalCode("12345");
    adr.setCountry("USA");
    adr.setLabel("123 Wall St.\nNew York, NY 12345\nUSA");
    adr.addType(AddressTypeParameter.WORK);
    vcard.addAddress(adr);

    adr = new AddressType();
    adr.setStreetAddress("123 Main St.");
    adr.setLocality("Albany");
    adr.setRegion("NY");
    adr.setPostalCode("54321");
    adr.setCountry("USA");
    adr.setLabel("123 Main St.\nAlbany, NY 54321\nUSA");
    adr.addType(AddressTypeParameter.HOME);
    vcard.addAddress(adr);

    vcard.addTelephoneNumber("1-555-555-1234", TelephoneTypeParameter.WORK);
    vcard.addTelephoneNumber("1-555-555-5678", TelephoneTypeParameter.WORK, TelephoneTypeParameter.CELL);

    vcard.addEmail("johndoe@hotmail.com", EmailTypeParameter.HOME);
    vcard.addEmail("doe.john@acme.com", EmailTypeParameter.WORK);

    vcard.addUrl("http://www.acme-co.com");

    vcard.setCategories("widgetphile", "biker", "vCard expert");

    vcard.setGeo(37.6, -95.67);

    vcard.setTimezone(new TimezoneType(-5, 0, "America/New_York"));

    File file = new File("portrait.jpg");
    PhotoType photo = new PhotoType(file, ImageTypeParameter.JPEG);
    vcard.addPhoto(photo);

    file = new File("pronunciation.ogg");
    SoundType sound = new SoundType(file, SoundTypeParameter.OGG);
    vcard.addSound(sound);

    vcard.setUid(UidType.random());

    vcard.setRevision(RevisionType.now());

    file = new File("john-doe.vcf");
    writeVCard(vcard, file, VCardVersion.V3_0);

    System.out.println();

    file = new File("john-doe.xml");
    writeXCard(vcard, file);
  }

  private static void writeVCard(VCard vcard, File file, VCardVersion version) throws IOException {
    System.out.println("Writing " + file.getName() + "...");

    List<String> warnings = new ArrayList<String>();
    Ezvcard.write(vcard).version(version).warnings(warnings).go(file);

    System.out.println("Completed with " + warnings.size() + " warnings.");
    for (String warning : warnings) {
      System.out.println("* " + warning);
    }
  }

  private static void writeXCard(VCard vcard, File file) throws IOException, TransformerException {
    System.out.println("Writing " + file.getName() + "...");

    List<String> warnings = new ArrayList<String>();
    Ezvcard.writeXml(vcard).indent(2).warnings(warnings).go(file);

    System.out.println("Completed with " + warnings.size() + " warnings.");
    for (String warning : warnings) {
      System.out.println("* " + warning);
    }
  }
}
}}}