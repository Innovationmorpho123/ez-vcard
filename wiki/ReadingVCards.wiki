#summary Describes how to parse a vCard.

<wiki:toc max_depth="2"/>

=1 `Ezvcard` class=

For most parsing operations, the [http://mikeangstadt.name/ezvcard/latest/ezvcard/Ezvcard.html Ezvcard] class can be used.  This class contains static methods that make use of *method chaining*, providing an elegant and user-friendly way to parse a vCard.

For example, the code below parses the first vCard from a file.

{{{
File vCardFile = new File("john-doe.vcf");
try {
  VCard vcard = Ezvcard.parse(vCardFile).first();
} catch (IOException e){
  //handle
}
}}}

==1.1 Entry methods==

Different parsing methods can be called, depending on the format of the vCard.  Each method is overloaded to support a variety of inputs, including `String`, `File`, `InputStream`, and `Reader`.

|| `Ezvcard.parse(...)` || Parses vCards encoded in the traditional, plain text format. ||
|| `Ezvcard.parseXml(...)` || Parses vCards from an XML document (xCard). ||
|| `Ezvcard.parseHtml(...)` || Parses vCards from an HTML page (hCard). ||
|| `Ezvcard.parseJson(...)` || Parses vCards from a JSON stream (jCard). ||

==1.2 Chaining methods==

The following chaining methods can be called to customize the parsing operation.  The methods which are available depend on the type of vCard being parsed.

|| *Method* || *Text* || *XML* || *HTML* || *JSON* || *Description* ||
|| `caretDecoding(boolean)` || x || || || || Sets whether parameter values should be decoded using circumflex accent encoding (enabled by default).  See the [http://mikeangstadt.name/ezvcard/latest/ezvcard/io/VCardReader.html#setCaretDecodingEnabled(boolean) javadocs] for a description of this encoding mechanism. ||
|| `pageUrl(String)` || || || x || || Sets the URL of the webpage being parsed.  This is used to resolve relative links within the HTML page and to set the SOURCE property on the vCard.  Calling this method has no effect if a `URL` object was passed into the `Ezvcard.parseHtml()` method. ||
|| `register(Class<? extends VCardType>)` || x || x || x || x || Registers an extended type class.  See [ExtendedProperties] for more information on how to create an extended type class. ||
|| `warnings(List<List<String>>)` || x || x || x || x || Allows the user to retrieve the warnings that were generated during the parsing operation.  Warnings are generated if the vCard deviates from the standard in some way and/or ez-vcard has to make a guess as to how to parse the vCard. The warnings will be added to the `List` object that was passed into this method. This `List` object is a "list of lists" because the data stream may contain more than one vCard and each parsed vCard generates its own list of warnings. ||

==1.3 Termination methods==

The chaining operation terminates when one of the following methods is called.  These methods are what execute the actual parsing operation and return the parsed [http://mikeangstadt.name/ezvcard/latest/ezvcard/VCard.html VCard] object(s).

|| `all()` || Parses all of the vCards from the stream, returning a `List<VCard>`. ||
|| `first()` || Parses only the first vCard from the stream, returning a single [http://mikeangstadt.name/ezvcard/latest/ezvcard/VCard.html VCard] object (or `null` if the stream did not contain any vCards).  Most vCard files only contain a single vCard, so this method acts as a convenient alternative to `all()` in that the programmer does not have to retrieve the first element from a list. ||

=2 Reader classes=

For additional control over the parsing operation, the following classes can be used.  These classes are what what [http://mikeangstadt.name/ezvcard/latest/ezvcard/Ezvcard.html Ezvcard] calls under the hood.  They are *not thread-safe*.

|| [http://mikeangstadt.name/ezvcard/latest/ezvcard/io/VCardReader.html VCardReader] || Parses vCards encoded in the traditional, plain text format. ||
|| [http://mikeangstadt.name/ezvcard/latest/ezvcard/io/XCardReader.html XCardReader] || Parses vCards from an XML document (xCard). ||
|| [http://mikeangstadt.name/ezvcard/latest/ezvcard/io/HCardReader.html HCardReader] || Parses vCards from an HTML page (hCard). ||
|| [http://mikeangstadt.name/ezvcard/latest/ezvcard/io/JCardReader.html JCardReader] || Parses vCards from a JSON stream (jCard). ||

==2.1 `VCardReader`==

[http://mikeangstadt.name/ezvcard/latest/ezvcard/io/VCardReader.html VCardReader] is used to read vCards that are encoded in the traditional, plain text format.  Use the `readNext()` method to read the next vCard from the input stream.

The example below reads the vCards from a file.

{{{
File file = new File("vcards.vcf");
VCardReader vcr = new VCardReader(file);
VCard vcard = null;
while ((vcard = vcr.readNext()) != null){
  ...
}
}}}

==2.2 `XCardReader`==

[http://mikeangstadt.name/ezvcard/latest/ezvcard/io/XCardReader.html XCardReader] is used to read vCards from an XML document (xCard standard).  Use the `readNext()` method to read the next vCard from the XML document.

The example below reads the vCards from an XML file.

{{{
File file = new File("vcards.xml");
XCardReader xcr = new XCardReader(file);
VCard vcard = null;
while ((vcard = xcr.readNext()) != null){
  ...
}
}}}

==2.3 `HCardReader`==

[http://mikeangstadt.name/ezvcard/latest/ezvcard/io/HCardReader.html HCardReader] is used to read vCards from an HTML webpage (hCard standard).  Use the `readNext()` method to read the next vCard from the HTML document.

The example below reads the vCards that are embedded inside a website.

{{{
URL url = new URL("http://microformats.org/wiki/hcard");
HCardReader hcr = new HCardReader(url);
VCard vcard = null;
while ((vcard = xcr.readNext()) != null){
  ...
}
}}}

If your application does not require hCard parsing functionality, you can exclude the "jsoup" dependency from your build.

{{{
<dependency>
  <groupId>com.googlecode.ez-vcard</groupId>
  <artifactId>ez-vcard</artifactId>
  <version>...</version>
  <exclusions>
    <!-- hCard parsing not needed -->
    <exclusion>
      <groupId>org.jsoup</groupId>
      <artifactId>jsoup</artifactId>
    </exclusion>
  </exclusions>
</dependency>
}}}

==2.4 `JCardReader`==

[http://mikeangstadt.name/ezvcard/latest/ezvcard/io/JCardReader.html JCardReader] is used to read vCards that are encoded in JSON (jCard standard).  Use the `readNext()` method to read the next vCard from the input stream.

The example below reads the vCards from a file.

{{{
File file = new File("vcards.json");
JCardReader jcr = new JCardReader(file);
VCard vcard = null;
while ((vcard = jcr.readNext()) != null){
  ...
}
}}}

If your application does not require jCard parsing functionality, you can exclude the "jackson-core" dependency from your build.

{{{
<dependency>
  <groupId>com.googlecode.ez-vcard</groupId>
  <artifactId>ez-vcard</artifactId>
  <version>...</version>
  <exclusions>
    <!-- jCard parsing not needed -->
    <exclusion>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-core</artifactId>
    </exclusion>
  </exclusions>
</dependency>
}}}

=3 Differences between `Ezvcard` and reader classes=

Most of the functionality in the reader classes can be accessed from [http://mikeangstadt.name/ezvcard/latest/ezvcard/Ezvcard.html Ezvcard].  However, there are some exceptions.

==3.1 !CompatibilityMode==

[http://mikeangstadt.name/ezvcard/latest/ezvcard/io/VCardReader.html VCardReader] and [http://mikeangstadt.name/ezvcard/latest/ezvcard/io/XCardReader.html XCardReader] allow a `CompatibilityMode` to be specified using the `setCompatibilityMode()` method.  The idea behind `CompatibilityMode` was to provide a way of tweaking how a vCard is parsed based on what application generated the vCard (e.g. Outlook, GMail, etc).  However, this has proven to be of little use because the differences that do exist can generally be accounted for without needing to specify a `CompatibilityMode`.  `CompatibilityMode` may be removed in a future release.

{{{
String vcardStr = ...;
VCardReader vcr = new VCardReader(vcardStr);
vcr.setCompatibilityMode(CompatibilityMode.KDE_ADDRESS_BOOK);
VCard vcard = vcr.readNext();
}}}

See the [CompatibilityModes] wiki page for more information.

==3.2 Streaming==

[http://mikeangstadt.name/ezvcard/latest/ezvcard/io/VCardReader.html VCardReader] and [http://mikeangstadt.name/ezvcard/latest/ezvcard/io/JCardReader.html JCardReader] parse the vCard data as it is read off the wire.  This is useful if a large or unending data stream must be parsed and you do not want to store all of the parsed [http://mikeangstadt.name/ezvcard/latest/ezvcard/VCard.html VCard] objects in memory at once or want to handle each vCard as it is read.  [http://mikeangstadt.name/ezvcard/latest/ezvcard/Ezvcard.html Ezvcard], by contrast, stores all of the parsed [http://mikeangstadt.name/ezvcard/latest/ezvcard/VCard.html VCard] objects in memory (inside a `List`).

{{{
Reader reader = ...
VCardReader vcr = new VCardReader(reader);
VCard vcard = null;
for ((vcard = vcr.readNext()) != null) {
  //do something with the VCard
}
reader.close();
}}}

Note that [http://mikeangstadt.name/ezvcard/latest/ezvcard/io/XCardReader.html XCardReader] and [http://mikeangstadt.name/ezvcard/latest/ezvcard/io/HCardReader.html HCardReader] are *not necessarily* streaming, despite having similar APIs to [http://mikeangstadt.name/ezvcard/latest/ezvcard/io/VCardReader.html VCardReader] and [http://mikeangstadt.name/ezvcard/latest/ezvcard/io/JCardReader.html JCardReader] (i.e. having a `readNext()` method).  They read the entire XML/HTML document into a DOM (in memory), then iterate over the DOM as `readNext()` is called.  The `VCard` objects are created one-by-one each time `readNext()` is called.