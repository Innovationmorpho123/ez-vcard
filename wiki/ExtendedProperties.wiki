#summary Describes how to work with extended properties

<wiki:toc max_depth="3"/>

The vCard standard allows for "extended" properties to exist in a vCard.  An extended property is a custom property whose name starts with "X-" and is not part of the vCard specification.  Many email clients make use of extended properties to store additional data.

|| *Note:*<br><br>The terms "type" and "property" are equivalent and are used interchangeably throughout the documentation and API.  Both terms refer to a<br> vCard data entry, such as an email address or phone number. The 3.0 specs use the term "type", while the 2.1 and 4.0 specs use the term<br> "property".<br><br>Similarly, the terms "sub type" (from the 3.0 specs) and "parameter" (from the 2.1/4.0 specs) are equivalent.  They both refer to the<br> additional attributes that are attached to a type/property.||

=1 Basic Usage=

To retrieve extended properties from a [https://ez-vcard.googlecode.com/svn/javadocs/latest/ezvcard/VCard.html VCard] object, use the [https://ez-vcard.googlecode.com/svn/javadocs/latest/ezvcard/VCard.html#getExtendedTypes(java.lang.String) getExtendedTypes(String)] method.  This will return a list of [https://ez-vcard.googlecode.com/svn/javadocs/latest/ezvcard/types/RawType.html RawType] objects.  Use the [https://ez-vcard.googlecode.com/svn/javadocs/latest/ezvcard/types/RawType.html#getValue() RawType.getValue()] method to retrieve the value of the extended property.

{{{
VCard vcard = ...
List<RawType> managers = vcard.getExtendedTypes("X-MS-MANAGER");
for (RawType manager : managers){
  System.out.println("Manager: " + manager.getValue());
}
}}}

A complete list of all the vCard's extended properties can be retrieved using the [https://ez-vcard.googlecode.com/svn/javadocs/latest/ezvcard/VCard.html#getExtendedTypes() getExtendedTypes()] method.

{{{
VCard vcard = ...
List<RawType> extendedTypes = vcard.getExtendedTypes();
for (RawType extendedType : extendedTypes){
  System.out.println(extendedType.getValue());
}
}}}

To add an extended property, call the [https://ez-vcard.googlecode.com/svn/javadocs/latest/ezvcard/VCard.html#addExtendedType(java.lang.String,%20java.lang.String) VCard.addExtendedType(String, String)] method.  This method returns the [https://ez-vcard.googlecode.com/svn/javadocs/latest/ezvcard/types/RawType.html RawType] object that was added so you can make further modifications to the property if necessary.

{{{
VCard vcard = new VCard();
RawType type = vcard.addExtendedType("X-SPOUSE", "Jane Doe");
type.getSubTypes().put("X-GENDER", "female");
}}}

=2 Creating an extended type class=

In addition to using the [https://ez-vcard.googlecode.com/svn/javadocs/latest/ezvcard/types/RawType.html RawType] class to get/set the value of an extended property, you can also can create an implementation of the [https://ez-vcard.googlecode.com/svn/javadocs/latest/ezvcard/types/VCardType.html VCardType] class.  This is useful if the property value is in a format that requires some sort of special parsing.

==2.1 Example==

The `FavColorsType` class below demonstrates how to create such a class.

Do not be alarmed as the size of the class.  Most methods do not require an implementation if you are only interested in a particular vCard format.  Methods that are required are labeled as "required" in the comments of the code sample below.

{{{
import ezvcard.*;
import ezvcard.io.*;
import ezvcard.types.*;
import ezvcard.util.*;
import java.util.*;
import javax.xml.namespace.QName;
import org.w3c.dom.*;

public class FavColorsType extends VCardType {
  private static final QName qname = new QName("http://fav-colors.net", "fav-colors");
  private List<String> favColors = new ArrayList<String>();

  //default constructor required
  public FavColorsType() {
    super("X-FAV-COLORS");
  }

  public List<String> getFavColors() {
    return favColors;
  }

  public void addFavColor(String color) {
    favColors.add(color);
  }

  //modifies the property's parameters before the property is written
  @Override
  protected void doMarshalSubTypes(VCardSubTypes copy, VCardVersion version, CompatibilityMode compatibilityMode, VCard vcard) {
    copy.setValue(VCardDataType.TEXT);
  }

  //writes the property value to a plain-text vCard
  @Override
  protected void doMarshalText(StringBuilder value, VCardVersion version, CompatibilityMode compatibilityMode) {
    if (!favColors.isEmpty()) {
      for (String color : sanitizeColors(compatibilityMode)) {
        value.append(VCardStringUtils.escape(color)).append(',');
      }
      value.deleteCharAt(value.length() - 1); //remove last comma
    }
  }

  //parses the property's value from a plain-text vCard
  @Override
  protected void doUnmarshalText(String value, VCardVersion version, List<String> warnings, CompatibilityMode compatibilityMode) {
    favColors = VCardStringUtils.splitBy(value, ',', true, true);
    if (favColors.contains("periwinkle") && version == VCardVersion.V4_0) {
      warnings.add("Periwinkle is deprecated in vCard 4.0.");
    }
  }

  //the XML namespace and element name to use when reading/writing from/to an XML document
  @Override
  public QName getQName() {
    return qname;
  }

  //writes the property to an XML document
  @Override
  protected void doMarshalXml(XCardElement element, CompatibilityMode compatibilityMode) {
    Element theElement = element.element();
    for (String color : sanitizeColors(compatibilityMode)) {
      Element colorElement = theElement.getOwnerDocument().createElementNS(qname.getNamespaceURI(), "color");
      colorElement.setTextContent(color);
      theElement.appendChild(colorElement);
    }
  }

  //parses the property from an XML document
  @Override
  protected void doUnmarshalXml(XCardElement element, List<String> warnings, CompatibilityMode compatibilityMode) {
    NodeList nl = element.element().getElementsByTagNameNS(qname.getNamespaceURI(), "color");
    List<Element> colorElements = XmlUtils.toElementList(nl);
    if (colorElements.isEmpty()) {
      throw new CannotParseException("No <color> elements found.");
    }

    favColors.clear();
    for (Element colorElement : colorElements) {
      favColors.add(colorElement.getTextContent());
    }
    if (favColors.contains("periwinkle")) {
      warnings.add("Periwinkle is deprecated in vCard 4.0.");
    }
  }

  //parses the property value from an HTML page
  @Override
  protected void doUnmarshalHtml(HCardElement element, List<String> warnings) {
    String lang = element.attr("lang");
    setLanguage((lang.length() == 0) ? null : lang);

    favColors.clear();
    favColors.addAll(element.allValues("color")); //gets the hCard values of all descendant elements that have a CSS class named "color"
  }

  //writes the property to a JSON stream
  @Override
  protected JCardValue doMarshalJson(VCardVersion version) {
    List<String> santizied = sanitizeColors(CompatibilityMode.RFC);
    return JCardValue.multi(VCardDataType.TEXT, santizied);
  }

  //parses the property value from a JSON stream
  @Override
  protected void doUnmarshalJson(JCardValue value, VCardVersion version, List<String> warnings) {
    favColors.clear();
    for (String valueStr : value.asMulti()) {
      favColors.add(valueStr);
    }
  }

  //validates the property's data
  //invoked when "VCard.validate()" is called
  @Override
  protected void _validate(List<String> warnings, VCardVersion version, VCard vcard) {
    if (favColors.isEmpty()) {
      warnings.add("No colors are defined.");
    }
    
    if (favColors.contains("periwinkle") && version == VCardVersion.V4_0) {
      warnings.add("Periwinkle is deprecated in vCard 4.0.");
    }
  }

  private List<String> sanitizeColors(CompatibilityMode compatibilityMode) {
    List<String> colors = new ArrayList<String>(favColors.size());
    for (String color : favColors) {
      if (compatibilityMode == CompatibilityMode.MS_OUTLOOK && "blue".equals(color)) {
        //Microsoft uses "azure" instead of "blue"
        color = "azure";
      } else if ("apple".equals(color)) {
        //this exception will prevent the property from being written to the vCard
        throw new SkipMeException("This property will not be marshalled because \"apple\" is not a color.");
      }
      colors.add(color);
    }
    return colors;
  }
}
}}}

===2.1.1 `Constructor`===

The constructor calls the parent class constructor, passing in the name of the property.  Extended property names MUST begin with "X-".  The extended property class *MUST define a public, no-arg constructor*.

===2.1.2 `doMarshalSubTypes`===

The `doMarshalSubTypes` method allows the property's parameters (aka "sub types") to be tweaked before the property is marshalled.  Modifications can safely be made to the [https://ez-vcard.googlecode.com/svn/javadocs/latest/ezvcard/VCardSubTypes.html VCardSubTypes] object that is passed into the method because it is a _copy_ of the property's parameters.

In the above example, the "LANGUAGE" parameter is removed if the version of the generated vCard is 2.1.

===2.1.3 `doMarshalText`===

The `doMarshalText` method is used to write the property value to a plain-text vCard (the most common type of vCard).  This method is abstract and must be implemented.  The value is appended to the `StringBuilder` object that is passed into the method.

*Special characters:* It is recommended that all special vCard characters be backslash-escaped if they do not have special meanings within the property value.  These special characters are: comma (`,`), semicolon (`;`), and backslash (`\`).  This is done in order to be consistent with the rest of the vCard standard.  The [https://ez-vcard.googlecode.com/svn/javadocs/latest/ezvcard/util/VCardStringUtils.html#escape(java.lang.String) VCardStringUtils.escape()] method can be used to do this.  Newline escaping and line folding do not need to be handled here (they are handled in the [https://ez-vcard.googlecode.com/svn/javadocs/latest/ezvcard/io/VCardWriter.html VCardWriter] class).

*!SkipMeException:* If it is determined that the property should NOT be included in the vCard, a [https://ez-vcard.googlecode.com/svn/javadocs/latest/ezvcard/io/SkipMeException.html SkipMeException] can be thrown.  This exception will prevent the marshaller from adding the property to the final vCard string.  The exception message will be logged as a warning.  Warnings can be retrieved using the [https://ez-vcard.googlecode.com/svn/javadocs/latest/ezvcard/io/VCardWriter.html#getWarnings() VCardWriter.getWarnings()] method.

*Compatibility modes:* The [https://ez-vcard.googlecode.com/svn/javadocs/latest/ezvcard/io/CompatibilityMode.html CompatibilityMode] object defines the expected consumer of the vCard and can be used to customize the marshalling of the property value.  It is set with the [https://ez-vcard.googlecode.com/svn/javadocs/latest/ezvcard/io/VCardWriter.html#setCompatibilityMode(ezvcard.io.CompatibilityMode) VCardWriter.setCompatibilityMode()] method.  Its default value is `CompatibilityMode.RFC`.  This functionality is deprecated and may be removed in the future.

*Example:*

`X-FAV-COLORS;VALUE=text:red,green,azure`

===2.1.4 `doUnmarshalText`===

The `doUnmarshalText` method is used to read the property value from a plain-text vCard (the most common type of vCard).  This method is abstract and must be implemented.  In the case of our `X-FAV-COLORS` property, the value is split by comma and saved to a `List` object.  The [https://ez-vcard.googlecode.com/svn/javadocs/latest/ezvcard/util/VCardStringUtils.html#splitBy(java.lang.String,%20char,%20boolean,%20boolean) VCardStringUtils.splitBy()] method can be used to split such sequences because it takes escaped characters into account.

The property's parameters are parsed _before_ `doUnmarshalText()` is called.  They can be accessed from the protected [https://ez-vcard.googlecode.com/svn/javadocs/latest/ezvcard/types/VCardType.html#subTypes VCard.subTypes] field.

*Version*: The [https://ez-vcard.googlecode.com/svn/javadocs/latest/ezvcard/VCardVersion.html VCardVersion] object defines the version of the vCard that is being parsed.  If a 2.1 vCard is being parsed, then this MAY be null, as the 2.1 specification doesn't require the version number to be located at the top of the vCard file.

*Warnings:* Warning messages can be added to the `warnings` list if any non-critical problems occurred during the unmarshalling process.

*!SkipMeException:* If it is determined that the property should NOT be unmarshalled into the `VCard` object, a [https://ez-vcard.googlecode.com/svn/javadocs/latest/ezvcard/io/SkipMeException.html SkipMeException] can be thrown.  This will prevent the reader from adding the property to the unmarshalled [https://ez-vcard.googlecode.com/svn/javadocs/latest/ezvcard/VCard.html VCard] object.  The exception message will be logged as a warning.  Warnings can be retrieved using the [https://ez-vcard.googlecode.com/svn/javadocs/latest/ezvcard/io/VCardReader.html#getWarnings() VCardReader.getWarnings()] method.

*!CannotParseException:* If the property value cannot be parsed, a [https://ez-vcard.googlecode.com/svn/javadocs/latest/ezvcard/io/CannotParseException.html CannotParseException] can be thrown.  This will cause the property to be unmarshalled as an extended type instead, so that the property's raw, unparsed value is preserved.  Extended types can be retrieved by calling the [https://ez-vcard.googlecode.com/svn/javadocs/latest/ezvcard/VCard.html#getExtendedType(java.lang.String) VCard.getExtendedType()] method.  A warning will also be added to the parser's warnings list.  Warnings can be retrieved using the [https://ez-vcard.googlecode.com/svn/javadocs/latest/ezvcard/io/VCardReader.html#getWarnings() VCardReader.getWarnings()] method.

*Compatibility modes:* The [https://ez-vcard.googlecode.com/svn/javadocs/latest/ezvcard/io/CompatibilityMode.html CompatibilityMode] object defines what application generated the vCard and can be used to customize the unmarshalling of the property value.  It is set with the [https://ez-vcard.googlecode.com/svn/javadocs/latest/ezvcard/io/VCardReader.html#getCompatibilityMode() VCardReader.setCompatibilityMode()] method.  Its default value is `CompatibilityMode.RFC`.  This functionality is deprecated and may be removed in the future.

===2.1.5 `getQName`===

The `getQName` method is used for reading/writing xCards (XML-encoded vCards).  It defines the namespace and element name of the property's XML element.  If this method is not overridden, then the namespace will default to the xCard namespace and the element name will default to the property's type name, converted to lower-case.

===2.1.6 `doMarshalXml`===

The `doMarshalXml` method is used to write the property to an XML document ("xCard").  The [https://ez-vcard.googlecode.com/svn/javadocs/latest/ezvcard/util/XCardElement.html XCardElement] object is the element which contains the vCard property.  It wraps a `org.w3c.dom.Element` object, adding xCard-specific functionality.  Since this is an extended property class, you will most likely want to work with the raw `org.w3c.dom.Element` object.  To retrieve this, call the [https://ez-vcard.googlecode.com/svn/javadocs/latest/ezvcard/util/XCardElement.html#element() XCardElement.element()] method.

*!SkipMeException:* If it is determined that the property should NOT be included in the vCard, a [https://ez-vcard.googlecode.com/svn/javadocs/latest/ezvcard/io/SkipMeException.html SkipMeException] can be thrown.  This exception will prevent the writer from adding the property to the XML document.  The exception message will be logged as a warning.  Warnings can be retrieved using the [https://ez-vcard.googlecode.com/svn/javadocs/latest/ezvcard/io/XCardDocument.html#getWarnings() XCardDocument.getWarnings()] method.

*Compatibility modes:* The [https://ez-vcard.googlecode.com/svn/javadocs/latest/ezvcard/io/CompatibilityMode.html CompatibilityMode] object defines the expected consumer of the vCard and can be used to customize the marshalling of the property value.  It is set with the [https://ez-vcard.googlecode.com/svn/javadocs/latest/ezvcard/io/XCardDocument.html#setCompatibilityMode(ezvcard.io.CompatibilityMode) XCardDocument.setCompatibilityMode()] method.  Its default value is `CompatibilityMode.RFC`.  This functionality is deprecated and may be removed in the future.

*Example:*

{{{
<fav-colors xmlns="http://fav-colors.net">
  <color>red</color>
  <color>green</color>
  <color>azure</color>
</fav-colors>
}}}

===2.1.7 `doUnmarshalXml`===

The `doUnmarshalXml` method is used to parse a property from an XML document ("xCard").  The [https://ez-vcard.googlecode.com/svn/javadocs/latest/ezvcard/util/XCardElement.html XCardElement] object is the element which contains the vCard property.  It wraps a `org.w3c.dom.Element` object, adding xCard-specific functionality.  Since this is an extended property class, you will most likely want to work with the raw element object.  To retrieve this, call the [https://ez-vcard.googlecode.com/svn/javadocs/latest/ezvcard/util/XCardElement.html#element() XCardElement.element()] method.

The property's parameters (aka "sub types") are parsed before `doUnmarshalXml()` is called.  They can be accessed from the protected [https://ez-vcard.googlecode.com/svn/javadocs/latest/ezvcard/types/VCardType.html#subTypes VCardType.subTypes] field.  Also, note that the XML elements that the parameters are stored in are removed from the [https://ez-vcard.googlecode.com/svn/javadocs/latest/ezvcard/util/XCardElement.html XCardElement] object.

*Warnings:* Warning messages can be added to the `warnings` list if any non-critical problems occurred during the unmarshalling process.

*!SkipMeException:* If it is determined that the property should NOT be unmarshalled into the resultant [https://ez-vcard.googlecode.com/svn/javadocs/latest/ezvcard/VCard.html VCard] object, a [https://ez-vcard.googlecode.com/svn/javadocs/latest/ezvcard/io/SkipMeException.html SkipMeException] can be thrown.  This will prevent the reader from adding the property to the unmarshalled [https://ez-vcard.googlecode.com/svn/javadocs/latest/ezvcard/VCard.html VCard] object.  The exception message will be logged as a warning.  Warnings can be retrieved using the [https://ez-vcard.googlecode.com/svn/javadocs/latest/ezvcard/io/XCardDocument.html#getParseWarnings() XCardDocument.getParseWarnings()] method.

*!CannotParseException:* If the property value cannot be parsed, a [https://ez-vcard.googlecode.com/svn/javadocs/latest/ezvcard/io/CannotParseException.html CannotParseException] can be thrown.  This will cause the property to be unmarshalled as an [https://ez-vcard.googlecode.com/svn/javadocs/latest/ezvcard/types/XmlType.html XML] property instead, so that the property's raw, unparsed value is preserved.  XML properties can be retrieved by making the following method call: [https://ez-vcard.googlecode.com/svn/javadocs/latest/ezvcard/VCard.html#getTypes(java.lang.Class) VCard.getTypes(XmlType.class)].  A warning will also be added to the parser's warnings list.  Warnings can be retrieved using the [https://ez-vcard.googlecode.com/svn/javadocs/latest/ezvcard/io/XCardDocument.html#getParseWarnings() XCardDocument.getParseWarnings()] method.

*Compatibility modes:* The [https://ez-vcard.googlecode.com/svn/javadocs/latest/ezvcard/io/CompatibilityMode.html CompatibilityMode] object defines the application that generated the vCard and can be used to customize the parsing of the property value.  It is set with the [https://ez-vcard.googlecode.com/svn/javadocs/latest/ezvcard/io/XCardDocument.html#getCompatibilityMode() XCardDocument.setCompatibilityMode()] method.  Its default value is `CompatibilityMode.RFC`.  This functionality is deprecated and may be removed in the future.

===2.1.8 `doUnmarshalHtml`===

The `doUnmarshalHtml` method is used to parse a property from an HTML document ("hCard").  The [https://ez-vcard.googlecode.com/svn/javadocs/latest/ezvcard/util/HCardElement.html HCardElement] object is the HTML element that contains the vCard property.

Unlike plain-text and XML vCards, the vCard parameters of HTML-encoded properties cannot be parsed automatically.  They must be parsed from inside of this method.

*Warnings:* Warning messages can be added to the `warnings` list if any problems occurred during the unmarshalling process.

*!SkipMeException:* If it is determined that the property should NOT be unmarshalled into the resultant [https://ez-vcard.googlecode.com/svn/javadocs/latest/ezvcard/VCard.html VCard] object, a [https://ez-vcard.googlecode.com/svn/javadocs/latest/ezvcard/io/SkipMeException.html SkipMeException] can be thrown.  This will prevent the reader from adding the property to the unmarshalled [https://ez-vcard.googlecode.com/svn/javadocs/latest/ezvcard/VCard.html VCard] object.  The exception message will be logged as a warning.  Warnings can be retrieved using the [https://ez-vcard.googlecode.com/svn/javadocs/latest/ezvcard/io/HCardReader.html#getWarnings() HCardReader.getWarnings()] method.

*!CannotParseException:* If the property value cannot be parsed, a [https://ez-vcard.googlecode.com/svn/javadocs/latest/ezvcard/io/CannotParseException.html CannotParseException] can be thrown.  This will cause the property to be unmarshalled as an extended type instead, so that the property's raw, unparsed HTML element text is preserved.  Extended types can be retrieved by calling the [https://ez-vcard.googlecode.com/svn/javadocs/latest/ezvcard/VCard.html#getExtendedType(java.lang.String) VCard.getExtendedType()] method.  A warning will also be added to the parser's warnings list.  Warnings can be retrieved using the [https://ez-vcard.googlecode.com/svn/javadocs/latest/ezvcard/io/HCardReader.html#getWarnings() HCardReader.getWarnings()] method.

===2.1.9 `doMarshalJson`===

The `doMarshalJson` method is used to write the property value to a JSON stream ("jCard").  The method returns a [https://ez-vcard.googlecode.com/svn/javadocs/latest/ezvcard/util/JCardValue.html JCardValue] object, which represents the property's value and data type in JSON form.

The class has factory methods to aid in the construction the three most typical types of jCard values.

 * *single* - Defines the value as a single value, such as a single string.  Most properties are single valued.
 * *multi* - Defines the value as a list of values (such as the CATEGORIES property).
 * *structured* - Defines the value as a structured value (i.e. a " list of lists", such as the ADR property).

Objects may be passed into these methods.  Primitive wrapper objects, such as `Integer` and `Boolean`, will be converted to their appropriate JSON data type.  All other objects will be passed into the JSON stream as strings (their `toString()` method will be invoked).  Null values will be converted to empty strings.

Each jCard property also must have a data type.  The data type is represented by the [https://ez-vcard.googlecode.com/svn/javadocs/latest/ezvcard/VCardDataType.html VCardDataType] class and is passed into the first argument of the factory method.

*Examples:*

{{{
JCardValue value = JCardValue.single(VCardDataType.TEXT, "one");
//yields: ["propName", {}, "text", "one"]
}}}

{{{
JCardValue value = JCardValue.multi(VCardDataType.TEXT, "one", 2, true);
//yields: ["propName", {}, "text", "one", 2, true]
}}}

{{{
List<List<?>> values = Arrays.asList(
  Arrays.asList(1),
  Arrays.asList(2, 3),
  Arrays.asList(4)
);
JCardValue value = JCardValue.structured(VCardDataType.INTEGER, values);
//yields: ["propName", {}, "integer", [1, [2, 3], 4]]
}}}

*!SkipMeException:* If it is determined that the property should NOT be included in the vCard, a [https://ez-vcard.googlecode.com/svn/javadocs/latest/ezvcard/io/SkipMeException.html SkipMeException] can be thrown.  This exception will prevent the marshaller from adding the property to the final vCard string.  The exception message will be logged as a warning.  Warnings can be retrieved using the [https://ez-vcard.googlecode.com/svn/javadocs/latest/ezvcard/io/JCardWriter.html#getWarnings() JCardWriter.getWarnings()] method.

===2.1.10 `doUnmarshalJson`===

The `doUnmarshalJson` method is used to read the property value from a JSON stream ("jCard").  The property value and data type are stored in the [https://ez-vcard.googlecode.com/svn/javadocs/latest/ezvcard/util/JCardValue.html JCardValue] object.

The class has helper methods to aid in the retrieval the three most typical types of jCard values.

 * *asSingle* - Gets the value of a property that contains a single value.  Most properties are single valued.
 * *asMulti* - Gets the value of a property that contains multiple values (such as the CATEGORIES property).
 * *asStructured* - Gets the value of a property that contains a structured value (i.e. a "list of lists", such as the ADR property).

The property's parameters are parsed _before_ `doUnmarshalJson()` is called.  They can be accessed from the protected [https://ez-vcard.googlecode.com/svn/javadocs/latest/ezvcard/types/VCardType.html#subTypes VCard.subTypes] field.

*Version*: The [https://ez-vcard.googlecode.com/svn/javadocs/latest/ezvcard/VCardVersion.html VCardVersion] object defines the version of the vCard that is being parsed.  This will always be 4.0, as this is the only version supported by jCard currently.

*Warnings:* Warning messages can be added to the `warnings` list if any non-critical problems occurred during the unmarshalling process.

*!SkipMeException:* If it is determined that the property should NOT be unmarshalled into the `VCard` object, a [https://ez-vcard.googlecode.com/svn/javadocs/latest/ezvcard/io/SkipMeException.html SkipMeException] can be thrown.  This will prevent the reader from adding the property to the unmarshalled [https://ez-vcard.googlecode.com/svn/javadocs/latest/ezvcard/VCard.html VCard] object.  The exception message will be logged as a warning.  Warnings can be retrieved using the [https://ez-vcard.googlecode.com/svn/javadocs/latest/ezvcard/io/JCardReader.html#getWarnings() JCardReader.getWarnings()] method.

*!CannotParseException:* If the property value cannot be parsed, a [https://ez-vcard.googlecode.com/svn/javadocs/latest/ezvcard/io/CannotParseException.html CannotParseException] can be thrown.  This will cause the property to be unmarshalled as an extended type instead, so that the property's raw, unparsed value is preserved.  Extended types can be retrieved by calling the [https://ez-vcard.googlecode.com/svn/javadocs/latest/ezvcard/VCard.html#getExtendedType(java.lang.String) VCard.getExtendedType()] method.  A warning will also be added to the parser's warnings list.  Warnings can be retrieved using the [https://ez-vcard.googlecode.com/svn/javadocs/latest/ezvcard/io/JCardReader.html#getWarnings() JCardReader.getWarnings()] method.

===2.1.11 `_validate`===

The `_validate` method is used to verify the correctness of the property's data model.  It is invoked when the [https://ez-vcard.googlecode.com/svn/javadocs/latest/ezvcard/VCard.html#validate(ezvcard.VCardVersion) VCard.validate()] method is called.

==2.2 Usage of extended type classes==

===2.2.1 Reading===

Before a vCard is parsed, the extended property class must be registered with the reader object.  Then, once a vCard has been read, the instances of the extended property can be retrieved using the [https://ez-vcard.googlecode.com/svn/javadocs/latest/ezvcard/VCard.html#getType(java.lang.Class) VCard.getType(Class)] or [https://ez-vcard.googlecode.com/svn/javadocs/latest/ezvcard/VCard.html#getTypes(java.lang.Class) VCard.getTypes(Class)] methods.

{{{
//using "Ezvcard" class
Reader reader = ...
VCard vcard = Ezvcard.parse(reader).register(FavColorsType.class).first();
reader.close();

FavColorsType first = vcard.getType(FavColorsType.class);
List<FavColorsType> all = vcard.getTypes(FavColorsType.class);
}}}

{{{
//using reader class
Reader reader = ...
VCardReader vcr = new VCardReader(reader);
vcr.registerExtendedType(FavColorsType.class);
VCard vcard = vcr.readNext();
reader.close();

FavColorsType first = vcard.getType(FavColorsType.class);
List<FavColorsType> all = vcard.getTypes(FavColorsType.class);
}}}

===2.2.2 Writing===

To add an instance of an extended property class to a vCard, call the [https://ez-vcard.googlecode.com/svn/javadocs/latest/ezvcard/VCard.html#addType(ezvcard.types.VCardType) VCard.addType(VCardType)] method.  No registration of the extended property class is required for writing.

{{{
VCard vcard = new VCard();

FavColorsType favColors = new FavColorsType();
favColors.addFavColor("green");
favColors.addFavColor("yellow");
vcard.addType(favColors);

Writer writer = ...
Ezvcard.write(vcard).go(writer);
writer.close();
}}}