#summary Describes how to work with extended vCard properties

The vCard standard allows for "extended" properties to exist in a vCard.  An extended property is a custom property whose name starts with "X-" and is not part of the vCard specification.  Many email clients make use of extended properties to store platform-specific data.

|| *Note:*<br><br>The terms "type" and "property" are equivalent and are used interchangeably throughout the documentation and API.  Both terms refer to a<br> vCard data entry, such as an email address or phone number. The 3.0 specs use the term "type", while the 2.1 and 4.0 specs use the term<br> "property".<br><br>Similarly, the terms "sub type" (from the 3.0 specs) and "parameter" (from the 2.1/4.0 specs) are equivalent.  They both refer to the<br> additional attributes that are attached to a type/property.||

=Basic Usage=

To retrieve extended properties from a `VCard` object, use the `getExtendedType(String)` method.  This will return a list of `RawType` objects.  Use the `RawType.getValue()` method to retrieve the value of the extended property.

{{{
VCard vcard = ...
List<RawType> managers = vcard.getExtendedType("X-MS-MANAGER");
for (RawType manager : managers){
  System.out.println("Manager: " + manager.getValue());
}
}}}

A complete list of all the `VCard`'s extended properties, indexed by name, can be retrieved using the `getExtendedTypes()` method.

{{{
VCard vcard = ...
Map<String, List<VCardType>> extendedTypes = vcard.getExtendedTypes();
for (List<VCardType> types : extendedTypes.values()){
  for (VCardType type : types){
    if (type instanceof RawType){
      RawType raw = (RawType)type;
      System.out.println(raw.getValue());
    }
  }
}
}}}

To add an extended property to a `VCard` object, call the `addExtendedType(String, String)` method.  This method returns a `RawType` object representing the property that was added.  You can make further modifications to the property by modifying this object.

{{{
VCard vcard = new VCard();
RawType type = vcard.addExtendedType("X-SPOUSE", "Jane Doe");
type.getSubTypes().put("X-GENDER", "female");
}}}

=Creating an extended type class=

In addition to using the `RawType` class to get/set the value of an extended property, you can also can create an implementation of the `VCardType` class.  This is useful if the property value is in a format that requires some sort of special parsing.

==Example==

The `FavColorsType` class below demonstrates how to create such a class.  It stores a list of the person's favorite colors.

{{{
import ezvcard.*;
import ezvcard.io.*;
import ezvcard.types.*;
import ezvcard.util.*;
import java.util.*;
import javax.xml.namespace.QName;
import org.w3c.dom.*;

public class FavColorsType extends VCardType {
  private static final QName qname = new QName("http://fav-colors.net", "fav-colors");
  private List<String> favColors = new ArrayList<String>();

  //default constructor required
  public FavColorsType(){
    super("X-FAV-COLORS");
  }

  public List<String> getFavColors(){
    return favColors;
  }

  public void addFavColor(String color){
    favColors.add(color);
  }
  
  public String getLanguage() {
  	return subTypes.getLanguage();
  }
  
  public void setLanguage(String language) {
    subTypes.setLanguage(language);
  }
  
  //modifies the property's parameters before the property is written
  @Override
  protected void doMarshalSubTypes(VCardSubTypes copy, VCardVersion version, List<String> warnings, CompatibilityMode compatibilityMode, VCard vcard) {
    if (version == VCardVersion.V2_1){
      copy.setLanguage(null); //remove the "LANGUAGE" parameter
    }
  }

  //writes the property value to a plain-text vCard
  @Override
  protected void doMarshalValue(StringBuilder value, VCardVersion version, List<String> warnings, CompatibilityMode compatibilityMode) {
    if (!favColors.isEmpty()) {
      for (String color : sanitizeColors(compatibilityMode)) {
        value.append(VCardStringUtils.escape(color)).append(',');
      }
      value.deleteCharAt(value.length() - 1); //remove last comma
    }
  }

  //parses the property's value from a plain-text vCard
  @Override
  protected void doUnmarshalValue(String value, VCardVersion version, List<String> warnings, CompatibilityMode compatibilityMode) {
    favColors.clear();
    String split[] = VCardStringUtils.splitBy(value, ',', true, true);
    favColors.addAll(Arrays.asList(split));
    if (favColors.contains("periwinkle") && version == VCardVersion.V4_0){
      warnings.add("Periwinkle is deprecated in vCard 4.0.");
    }
  }
  
  //the XML namespace and element name to use when reading/writing from/to an XML document
  @Override
  public QName getQName() {
    return qname;
  }
  
  //writes the property to an XML document
  @Override
  protected void doMarshalValue(XCardElement element, List<String> warnings, CompatibilityMode compatibilityMode) {
    Element theElement = element.getElement();
    for (String color : sanitizeColors(compatibilityMode)) {
      Element colorElement = theElement.getOwnerDocument().createElementNS(qname.getNamespaceURI(), "color");
      theElement.appendChild(colorElement);
    }
  }
  
  //parses the property from an XML document
  @Override
  protected void doUnmarshalValue(XCardElement element, List<String> warnings, CompatibilityMode compatibilityMode) {
    favColors.clear();
    NodeList nl = element.getElement().getElementsByTagNameNS(qname.getNamespaceURI(), "color");
    List<Element> colorElements = XmlUtils.toElementList(nl);
    for (Element colorElement : colorElements) {
      favColors.add(colorElement.getTextContent());
    }
    if (favColors.contains("periwinkle")){
      warnings.add("Periwinkle is deprecated in vCard 4.0.");
    }
  }
  
  //parses the property value from an HTML page
  @Override
  protected void doUnmarshalHtml(HCardElement element, List<String> warnings) {
    String lang = element.attr("lang");
    setLanguage((lang.length() == 0) ? null : lang);
    
    favColors.clear();
    favColors.addAll(element.allValues("color")); //gets the hCard values of all descendant elements that have a CSS class named "color"
  }
  
  private List<String> sanitizeColors(CompatibilityMode compatibilityMode){
    List<String> colors = new ArrayList<String>(favColors.size());
    for (String color : favColors) {
      if (compatibilityMode == CompatibilityMode.MS_OUTLOOK && "blue".equals(color)){
        //Microsoft uses "azure" instead of "blue"
        color = "azure";
      } else if ("apple".equals(color)){
        //this exception will prevent the property from being written to the vCard
        throw new SkipMeException("This property will not be marshalled because \"apple\" is not a color.");
      }
      colors.add(color);
    }
    return colors; 
  }
}
}}}

Below is a description of each method in the class:

===Constructor===

The constructor calls the parent class constructor, passing in the name of the property.  Extended property names MUST begin with "X-".  The extended property class *MUST define a public, no-arg constructor*.

===doMarshalSubTypes===

The `doMarshalSubTypes()` method allows the property's parameters (aka "sub types") to be tweaked before the property is marshalled.  Modifications can safely be made to the `VCardSubTypes` object that is passed into the method because it is a _copy_ of the property's parameters (which are stored in the `VCardType.subTypes` field).

In the above example, the "LANGUAGE" parameter is removed if the version of the generated vCard is 2.1.

===doMarshalValue(!StringBuilder value, ...)===

The `doMarshalValue(!StringBuilder value, ...)` method is used to write the property value to a plain-text vCard (the most common type of vCard).  This method is abstract and must be implemented.  The value is appended to the `StringBuilder` object that is passed into the method.

It is recommended that all special vCard characters be escaped in order to be consistent with the vCard standard.  These special characters are: comma, semicolon, and backslash.  The `VCardStringUtils.escape()` method can be used to safely escape these special characters.  Newlines are also special characters, but they do not need to be escaped in this method (they are escaped in the `VCardWriter` class).

Warning messages can be added to the `warnings` list if any problems occurred during the marshalling process.

The `CompatibilityMode` object defines the expected consumer of the vCard and can be used to customize the marshalling of the property value.  It is set with the `VCardWriter.setCompatibilityMode()` method.  Its default value is `CompatibilityMode.RFC`.

If it is determined that the property should NOT be included in the vCard, a `SkipMeException` can be thrown.  This exception will prevent the marshaller from adding the property to the final vCard string.  The exception message will be logged as a warning.  Warnings can be retrieved using the `VCardWriter.getWarnings()` method.

This method is *not* responsible for line folding.  This is handled by the `VCardWriter` class.

An example of a marshalled `X-FAV-COLORS` property is below:

`X-FAV-COLORS;LANGUAGE=en:red,green,azure`

===doUnmarshalValue(String value, ...)===

The `doUnmarshalValue(String value, ...)` method is used to read the property value from a plain-text vCard (the most common type of vCard).  This method is abstract and must be implemented.  In the example above, the value is split by comma and saved to a `List` object.  The `VCardStringUtils.splitBy()` method is an enhanced splitting function that takes escaped characters into account (see the [http://mikeangstadt.name/ezvcard/latest/ezvcard/util/VCardStringUtils.html Javadocs] for more details).

The property's parameters (aka "sub types") are parsed before `doUnmarshalValue()` is called.  They can be accessed from the protected `subTypes` field, defined in the parent `VCardType` class.

The `VCardVersion` argument defines the version of the vCard that is being parsed.  If a 2.1 vCard is being parsed, then this MAY be null, as the 2.1 specification doesn't require the version number to be located at the top of the vCard file.

Warning messages can be added to the `warnings` list if any problems occurred during the unmarshalling process.

The `CompatibilityMode` argument defines the application that generated the vCard and can be used to customize the unmarshalling of the property value.  It is set with the `VCardReader.setCompatibilityMode()` method.  Its default value is `CompatibilityMode.RFC`.

If it is determined that the property should NOT be unmarshalled into the `VCard` object, a `SkipMeException` can be thrown.  This will prevent the reader from adding the property to the unmarshalled `VCard` object.  The exception message will be logged as a warning.  Warnings can be retrieved using the `VCardReader.getWarnings()` method.

===getQName()===

The `getQName()` method defines the namespace and element name of the property's XML element for XML-encoded vCards ("xCards").  If this method is not overridden, then the namespace will default to the xCard namespace and the element name will default to the property's type name, converted to lower-case.

===doMarshalValue(XCardElement element, ...)===

The `doMarshalValue(XCardElement element, ...)` method is used to write the property to an XML document ("xCard").  The `XCardElement` parameter is the element which contains the vCard property.  It is a wrapper class that contains xCard-specific functionality.  Since this is an extended property class, you will most likely want to work with the raw `org.w3c.dom.Element` object.  To retrieve this, call the `getElement()` method.

Warning messages can be added to the `warnings` list if any problems occurred during the marshalling process.

The `CompatibilityMode` object defines the expected consumer of the vCard and can be used to customize the marshalling of the property value.  It is set with the `XCardDocument.setCompatibilityMode()` method.  Its default value is `CompatibilityMode.RFC`.

If it is determined that the property should NOT be included in the vCard, a `SkipMeException` can be thrown.  This exception will prevent the writer from adding the property to the XML document.  The exception message will be logged as a warning.  Warnings can be retrieved using the `XCardDocument.getWarnings()` method.

An example of a marshalled `X-FAV-COLORS` property is below:

{{{
<fav-colors xmlns="http://fav-colors.net">
  <parameters xmlns="urn:ietf:params:xml:ns:vcard-4.0">
    <language>
      <language-tag>en-US</language-tag>
    </language>
  </parameters>
  <color>red</color>
  <color>green</color>
  <color>azure</color>
</fav-colors>
}}}

===doUnmarshalValue(XCardElement element, ...)===

The `doUnmarshalValue(XCardElement element, ...)` method is used to parse a property from an XML document ("xCard").  The `XCardElement` parameter is the element which contains the vCard property.  It is a wrapper class that contains xCard-specific functionality.  Since this is an extended property class, you will most likely want to work with the raw `org.w3c.dom.Element` object.  To retrieve this, call the `getElement()` method.

The property's parameters (aka "sub types") are parsed before `doUnmarshalValue()` is called.  They can be accessed from the protected `subTypes` field, defined in the parent `VCardType` class.  The XML elements that the properties are stored in are removed from the `XCardElement` object before `doUnmarshalValue()` is called.

Warning messages can be added to the `warnings` list if any problems occurred during the unmarshalling process.

The `CompatibilityMode` argument defines the application that generated the vCard and can be used to customize the parsing of the property value.  It is set with the `XCardReader.setCompatibilityMode()` method.  Its default value is `CompatibilityMode.RFC`.

If it is determined that the property should NOT be unmarshalled into the resultant `VCard` object, a `SkipMeException` can be thrown.  This will prevent the reader from adding the property to the unmarshalled `VCard` object.  The exception message will be logged as a warning.  Warnings can be retrieved using the `XCardReader.getWarnings()` method.

===doUnmarshalHtml(HCardElement element, ...)===

The `doUnmarshalHtml(HCardElement element, ...)` method is used to parse a property from an HTML document ("hCard").  The `HCardElement` object represents the HTML element that contains the vCard property.

Unlike plain-text and XML vCards, the vCard parameters of HTML-encoded properties cannot be parsed automatically.  They must be parsed from inside of this method.

Warning messages can be added to the `warnings` list if any problems occurred during the unmarshalling process.

==Usage==

===Reading===

Before a vCard is parsed, the extended property class must be registered with the reader object.  Then, once a vCard has been read, the instances of the extended property can be retrieved using the `VCard.getExtendedType(Class<? extends VCardType>)` method.

{{{
//using "Ezvcard" class
Reader reader = ...
VCard vcard = Ezvcard.parse(reader).register(FavColorsType.class).first();
reader.close();

List<FavColorsType> favColorsTypes = vcard.getExtendedType(FavColorsType.class);
}}}

{{{
//using reader class
Reader reader = ...
VCardReader vcr = new VCardReader(reader);
vcr.registerExtendedType(FavColorsType.class);
VCard vcard = vcr.readNext();
reader.close();

List<FavColorsType> favColorsTypes = vcard.getExtendedType(FavColorsType.class);
}}}

See the [ReadingVCards Reading vCards] wiki page for more information on how to read a vCard.

===Writing===

To add an instance of an extended property class to a `VCard`, call the `VCard.addExtendedType(VCardType)` method.  No registration of the extended property class is required for writing.

{{{
VCard vcard = new VCard();

FavColorsType favColors = new FavColorsType();
favColors.addFavColor("green");
favColors.addFavColor("yellow");
vcard.addExtendedType(favColors);

Writer writer = ...
Ezvcard.write(vcard).go(writer);
writer.close();
}}}

See the [WritingVCards Writing vCards] wiki page for more information on how to write a vCard.
