#summary Describes how to write vCards (versions 0.9.0 and above).

----
*NOTE:*

This page applies to the *latest version* of ez-vcard.  Please see [ReadingVCardsOld this page] if you are running ez-vcard 0.8.5 or earlier.
----

<wiki:toc max_depth="2"/>

=1 `Ezvcard` class=

For most writing operations, the [https://ez-vcard.googlecode.com/svn/javadocs/latest/ezvcard/Ezvcard.html Ezvcard] class can be used.  This class contains static methods that make use of *method chaining*, providing an elegant and user-friendly way to write a vCard.

For example, the code below writes a version 4.0 vCard to a file.

{{{
VCard vcard = ...
File vCardFile = new File("john-doe.vcf");
try {
  Ezvcard.write(vcard).version(VCardVersion.V4_0).go(vCardFile);
} catch (IOException e){
  //handle
}
}}}

==1.1 Entry methods==

Different write methods can be called, depending on the format of the vCard.  Each method accepts one or more [https://ez-vcard.googlecode.com/svn/javadocs/latest/ezvcard/VCard.html VCard] objects as parameters.

|| `Ezvcard.write(...)` || Writes vCards in the traditional, plain text format. ||
|| `Ezvcard.writeXml(...)` || Writes vCards to an XML document (xCard). ||
|| `Ezvcard.writeHtml(...)` || Writes vCards to an HTML page (hCard). ||
|| `Ezvcard.writeJson(...)` || Writes vCards to a JSON stream (jCard). ||

==1.2 Chaining methods==

The following chaining methods can be called to customize the write operation.  The methods which are available depend on the type of vCard being written.

|| *Method* || *Text* || *XML* || *HTML* || *JSON* || *Description* ||
|| `caretEncoding(boolean)` || x || || || || Sets whether parameter values should be encoded using circumflex accent encoding (disabled by default).  See the [https://ez-vcard.googlecode.com/svn/javadocs/latest/ezvcard/io/text/VCardWriter.html#setCaretEncodingEnabled(boolean) javadocs] for a description of this encoding mechanism. ||
|| `indent(int)` || || x || || || Pretty-prints the XML and specifies the number of spaces to use as the indent string.  By default, the XML string will not be pretty-printed. ||
|| `indent(boolean)` || || || || x || Pretty-prints the JSON stream.  By default, the JSON stream will not be pretty-printed. ||
|| `prodId(boolean)` || x || x || || x || Sets whether or not to add a PRODID property to each vCard, which says that the vCard was generated by this library (enabled by default). For 2.1 vCards, the extended type X-PRODID is used, since PRODID is not supported by that version. ||
|| `register(VCardPropertyScribe)` || x || x || || x || Registers a property scribe.  See [ExtendedProperties] for more information on scribes. ||
|| `version(VCardVersion)` || x || || || || Sets the version that the vCard will be written as.  Defaults to the version that's attached to the [https://ez-vcard.googlecode.com/svn/javadocs/latest/ezvcard/VCard.html VCard] objects or to 3.0 if the [https://ez-vcard.googlecode.com/svn/javadocs/latest/ezvcard/VCard.html VCard] object does not have a version.  XML-encoded vCards are always marshalled to version 4.0. HTML-encoded vCards are not marshalled in any version-specific way. ||
|| `versionStrict(boolean)` || x || x || || x || If enabled, properties that do not support the target vCard version will be excluded from the written vCard (enabled by default). ||

==1.3 Termination method==

The chaining operation terminates when one of the following methods is called.  The methods which are available depend on the type of vCard being written.

|| *Method* || *Text* || *XML* || *HTML* || *JSON* || *Description* ||
|| `go(...)` || x || x || x || x || Writes the vCard(s) to an output stream, such as a `String`, `File`, `OutputStream`, or `Writer`. ||
|| `dom()` || || x || || || Returns the raw DOM of the generated XML document (a "`org.w3c.dom.Document`" object). ||

=2 `VCard.write()` methods=

A vCard can also be written by calling one of the `VCard.write(...)` methods.  This method is overloaded to support a variety outputs, including `String`, `File`, `OutputStream`, and `Writer`.  There are `write(...)` methods for every format (text, XML, HTML, and JSON).  Under the hood, these methods call [https://ez-vcard.googlecode.com/svn/javadocs/latest/ezvcard/Ezvcard.html Ezvcard]. 

When writing a plain-text vCard, the vCard will be marshalled to the version attached to the [https://ez-vcard.googlecode.com/svn/javadocs/latest/ezvcard/VCard.html VCard] object (see: `VCard.get/setVersion()`).  If the object does not have a version attached to it, it will be marshalled to version 3.0.

=3 Writer classes=

For additional control over the write operation, the following classes can be used.  These are what [https://ez-vcard.googlecode.com/svn/javadocs/latest/ezvcard/Ezvcard.html Ezvcard] calls under the hood.  They are *not thread-safe*.

|| [https://ez-vcard.googlecode.com/svn/javadocs/latest/ezvcard/io/text/VCardWriter.html VCardWriter] || Writes vCards in the traditional, plain text format. ||
|| [https://ez-vcard.googlecode.com/svn/javadocs/latest/ezvcard/io/xml/XCardDocument.html XCardDocument] || Writes vCards to an XML document (xCard). ||
|| [https://ez-vcard.googlecode.com/svn/javadocs/latest/ezvcard/io/html/HCardPage.html HCardPage] || Writes vCards to an HTML page (hCard). ||
|| [https://ez-vcard.googlecode.com/svn/javadocs/latest/ezvcard/io/json/JCardWriter.html JCardWriter] || Writes vCards to a JSON stream (jCard). ||

==3.1 `VCardWriter`==

[https://ez-vcard.googlecode.com/svn/javadocs/latest/ezvcard/io/text/VCardWriter.html VCardWriter] is used to write vCards in the traditional, plain text format.  Use the `write(VCard)` method to write a vCard to the output stream.

The example below writes a list of version 3.0 vCards to a file.

{{{
List<VCard> vcards = ...
VCardVersion version = VCardVersion.V3_0;
File file = new File("vcards.vcf");
VCardWriter vcw = new VCardWriter(file, version);
for (VCard vcard : vcards){
  vcw.write(vcard);
}
vcw.close();
}}}

==3.2 `XCardDocument`==

[https://ez-vcard.googlecode.com/svn/javadocs/latest/ezvcard/io/xml/XCardDocument.html XCardDocument] is used to write vCards to an XML document (xCard standard).  Use the `add(VCard)` method to add a vCard to the XML document.  This adds it to an in-memory, XML DOM.  Once all vCards have been added, use one of the `write()` methods to marshal the XML document.  You can also call the `getDocument()` method at any time to gain access to the raw DOM.

The example below writes a list of vCards to an XML file.

{{{
List<VCard> vcards = ...
XCardDocument xcardDoc = new XCardDocument();

//add vCards
for (VCard vcard : vcards){
  xcardDoc.addVCard(vcard);
}

//access raw DOM
Document document = xcardDoc.getDocument();

//write XML
File file = new File("vcards.xml")
xcardDoc.write(file, 2);
}}}

==3.3 `HCardPage`==

[https://ez-vcard.googlecode.com/svn/javadocs/latest/ezvcard/io/html/HCardPage.html HCardPage] is used to generate a basic webpage that contains HTML-encoded vCards (hCard standard).  Use the `add(VCard)` method to add a vCard to the HTML document.  Once all vCards have been added, use one of the `write()` methods to generate the HTML document.

The example below writes a list of vCards to an HTML file.

{{{
List<VCard> vcards = ...
HCardPage hcardPage = new HCardPage();

//add vCards
for (VCard vcard : vcards){
  hcardPage.addVCard(vcard);
}

//write HTML
File file = new File("vcards.html")
hcardPage.write(file);
}}}

If your application does not require hCard writing functionality, you can exclude the "freemarker" dependency from your build.

{{{
<dependency>
  <groupId>com.googlecode.ez-vcard</groupId>
  <artifactId>ez-vcard</artifactId>
  <version>...</version>
  <exclusions>
    <!-- hCard writing not needed -->
    <exclusion>
      <groupId>org.freemarker</groupId>
      <artifactId>freemarker</artifactId>
    </exclusion>
  </exclusions>
</dependency>
}}}

==3.4 `JCardWriter`==

[https://ez-vcard.googlecode.com/svn/javadocs/latest/ezvcard/io/json/JCardWriter.html JCardWriter] is used to write vCards in JSON format (jCard standard).  Use the `write(VCard)` method to write a vCard to the output stream.

The example below writes a list of vCards to a file. 

{{{
List<VCard> vcards = ...
File file = new File("vcards.json");
JCardWriter jcw = new JCardWriter(file, true); //"true" wraps the jCards in a JSON array
for (VCard vcard : vcards){
  jcw.write(vcard);
}
jcw.close();
}}}

It's important to remember to *close the [https://ez-vcard.googlecode.com/svn/javadocs/latest/ezvcard/io/json/JCardWriter.html JCardWriter]* when the write operation is complete.  This is required in order for the JSON stream to be properly terminated.  There are two ways to close it.

 # [https://ez-vcard.googlecode.com/svn/javadocs/latest/ezvcard/io/json/JCardWriter.html#close() JCardWriter.close()] - Terminates the JSON stream *and* the output stream.
 # [https://ez-vcard.googlecode.com/svn/javadocs/latest/ezvcard/io/json/JCardWriter.html#closeJsonStream() JCardWriter.closeJsonStream()] - Terminates the JSON stream, but keeps the output stream open.
 
If your application does not require jCard writing functionality, you can exclude the "jackson-core" dependency from your build.

{{{
<dependency>
  <groupId>com.googlecode.ez-vcard</groupId>
  <artifactId>ez-vcard</artifactId>
  <version>...</version>
  <exclusions>
    <!-- jCard writing not needed -->
    <exclusion>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-core</artifactId>
    </exclusion>
  </exclusions>
</dependency>
}}}

=4 Differences between `Ezvcard` and writer classes=

Most of the functionality in the writer classes can be accessed from [https://ez-vcard.googlecode.com/svn/javadocs/latest/ezvcard/Ezvcard.html Ezvcard].  However, there is one exception.

==4.1 Streaming==

[https://ez-vcard.googlecode.com/svn/javadocs/latest/ezvcard/io/text/VCardWriter.html VCardWriter] and [https://ez-vcard.googlecode.com/svn/javadocs/latest/ezvcard/io/json/JCardWriter.html JCardWriter] write to the output stream as each [https://ez-vcard.googlecode.com/svn/javadocs/latest/ezvcard/VCard.html VCard] object is passed into their `write(VCard)` methods.  This is useful if many [https://ez-vcard.googlecode.com/svn/javadocs/latest/ezvcard/VCard.html VCard] objects need to be written and they cannot all be stored in memory at once.  [https://ez-vcard.googlecode.com/svn/javadocs/latest/ezvcard/Ezvcard.html Ezvcard], by contrast, requires that all [https://ez-vcard.googlecode.com/svn/javadocs/latest/ezvcard/VCard.html VCard] objects be created up-front.

{{{
Writer writer = ...
VCardWriter vcw = new VCardWriter(writer);
while (someCondition()) {
  VCard vcard = //generate a vCard
  vcw.write(vcard);
}
writer.close();
}}}

[https://ez-vcard.googlecode.com/svn/javadocs/latest/ezvcard/io/xml/XCardDocument.html XCardDocument] and [https://ez-vcard.googlecode.com/svn/javadocs/latest/ezvcard/io/html/HCardPage.html HCardPage] are *not* streaming.  These classes must create the entire XML/HTML document in memory before it can be written out.