#summary Describes how to marshal a VCard object to a string or XML document.

=VCard.write()=

For simple write operations, the `VCard.write()` method can be used to marshal a `VCard` object to a string or a file.

{{{
VCard vcard = ...
String vcardStr = vcard.write();
}}}

{{{
VCard vcard = ...
File file = new File("vcard.vcf");
vcard.write(file);
}}}

This method makes use of the version that is attached to the `VCard` object to determine which version the vCard should be marshalled to.  If the `VCard` object doesn't have a version, then it is marshalled to a 3.0 vCard.

{{{
VCard vcard = ...
vcard.setVersion(VCardVersion.V4_0); //marshal to a 4.0 vCard
String vcardStr = vcard.write();
}}}

=VCardWriter=
For more control over how a vCard is written, the `VCardWriter` class can be used.  This is what `VCard.write()` uses under the covers.  It accepts a `java.io.Writer` object, allowing the vCard to be written to any output stream.

It also gives the programmer access to the warnings that the writer generates.  A warning is generated if there are any standards which the vCard breaks.  The EZ-vCard API does its best to prevent the programmer from doing anything that could break the standards, but there are some areas that have to be left unchecked in order for EZ-vCard to support all versions of the vCard standard.  The warnings are accessed by calling `getWarnings()` after the vCard is written.  The list of warnings is reset every time a new vCard is written.

{{{
List<VCard> vcards = ...
VCardVersion version = VCardVersion.V4_0;
Writer writer = null;
try{
  writer = //StringWriter, FileWriter, etc
  VCardWriter vcw = new VCardWriter(writer, version);
  for (VCard vcard : vcards){
    vcw.write(vcard);
	
    //warnings are generated if there are version compatibility problems
    for (String warning : vcr.getWarnings()){
      System.out.println(warning);
    }
  }
} finally{
  if (writer != null){
    try {
      writer.close();
    } catch (IOException e){}
  }
}
}}}

As shown in the example above, `VCardWriter` can write multiple vCards to the same stream.  The `write()` method is called to marshal a `VCard` object to the output stream.  As with all Java IO operations, the programmer must remember to close the `Writer` object after all vCards have been written.

==Setting the vCard version==

The version that each vCard will be marshalled as can be specified in the `VCardWriter` constructor or through the `setTargetVersion()` method.  If not specified, it will default to version 3.0.  Unlike `VCard.write()`, `VCardWriter` *ignores* the version that is attached to the `VCard` object.

The `setTargetVersion()` method can be called at any time.  For example, if the programmer wishes to marshal one vCard as 2.1 and another as 3.0, the target version can be changed after the first vCard has been written (see example below).

{{{
VCard vcard1 = ...
VCard vcard2 = ...
Writer writer = ...
VCardWriter vcw = new VCardWriter(writer);
vcw.setTargetVersion(VCardVersion.V2_1);
vcw.write(vcard1);
vcw.setTargetVersion(VCardVersion.V3_0);
vcw.write(vcard2);
writer.close();
}}}

==X-GENERATOR==

An extended property called `X-GENERATOR` is added to the end of every vCard that is written with `VCardWriter`.  This property marks the vCard as having been generated by the EZ-vCard library.  It can be disabled by passing `false` into the `setAddGenerator()` method.

=XCardMarshaller=
A vCard can also be encoded as an XML document (called an "xCard").  The `XCardMarshaller` class is used to marshal one or more `VCard` objects into an XML document.

{{{
List<VCard> vcards = ...

//add the "VCard" objects to the marshaller
XCardMarshaller xcm = new XCardMarshaller();
for (VCard vcard : vcards){
  xcm.addVCard(vcard);
  
  //warnings are generated if there are version compatibility problems
  for (String warning : vcr.getWarnings()){
    System.out.println(warning);
  }
}

//the XML DOM object that the marshaller creates can be accessed like so
Document document = xcm.getDocument();

//write the XML document to an output stream
Writer writer = null;
try{
  writer = //StringWriter, FileWriter, etc
  xcm.write(writer);
} finally{
  if (writer != null){
    try {
      writer.close();
    } catch (IOException e){}
  }
}
}}}

To marshall a vCard, one or more `VCard` objects are added to the marshaller using the `addVCard()` method.  This converts the `VCard` to an XML element and adds the element to the marshaller's DOM.  Any warnings that were generated when the vCard was marshalled can be accessed using the `getWarnings()` method.  The list of warnings is reset every time a new vCard is added to the marshaller.

Once all vCards have been added, the `Document` object that the marshaller generates can be retrieved using the `getDocument()` method.  In addition, the XML document can be written to an output stream using the `write()` method.

==Setting the vCard version==

The only version that xCard supports is 4.0.  Therefore, the `XCardMarshaller` class contains no mechanism for changing the target version. 

==X-GENERATOR==

An extended property called `X-GENERATOR` is added to the end of every vCard that is written with `XCardMarshaller`.  This property marks the vCard as having been generated by the EZ-vCard library.  It can be disabled by passing `false` into the `setAddGenerator()` method.