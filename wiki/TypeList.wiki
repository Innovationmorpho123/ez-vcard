#summary Contains a listing of all vCard properties, along with code samples (versions 0.9.0 and above).
#labels Featured

----
*NOTE:*

This page applies to the *latest version* of ez-vcard.  Please see [TypeListOld this page] if you are running ez-vcard 0.8.5 or earlier.
----

The page contains a listing of all vCard properties, as well as information on how to use these properties with ez-vcard.

=ADR=
Defines a mailing address.

*vCard versions:* 2.1, 3.0, 4.0

*Java class:* [https://ez-vcard.googlecode.com/svn/javadocs/latest/index.html?ezvcard/property/Address.html Address]

{{{
VCard vcard = new VCard();
Address adr = new Address();
adr.setStreetAddress("123 Main St.");
adr.setLocality("Austin");
adr.setRegion("TX");
adr.setPostalCode("12345");
adr.setCountry("USA");
adr.addType(AddressType.WORK);
adr.addType(AddressType.DOM);

//optionally, provide the exact text to print out on the mailing label
adr.setLabel("123 Main St.\nAustin, Tx 12345\nUSA");

vcard.addAddress(adr);
}}}

{{{
VCard vcard = ...
for (Address adr : vcard.getAddresses()){
  ...
}
}}}

=AGENT=
An embedded vCard or URL containing the information of someone who represents the person.

*vCard versions:* 2.1, 3.0

*Java class:* [https://ez-vcard.googlecode.com/svn/javadocs/latest/index.html?ezvcard/property/Agent.html Agent]

{{{
//URL
VCard vcard = new VCard();
Agent agent = new Agent("http://mi5.gov.uk/007");
vcard.setAgent(agent);

//vCard
VCard vcard = new VCard();
VCard agentVcard = new VCard();
agentVcard.setFormattedName(new FormattedName("Agent 007"));
Agent agent = new Agent(agentVcard);
vcard.setAgent(agent);
}}}

=ANNIVERSARY=
Defines the person's anniversary.

*vCard versions:* 4.0

*Java class:* [https://ez-vcard.googlecode.com/svn/javadocs/latest/index.html?ezvcard/property/Anniversary.html Anniversary]

{{{
VCard vcard = new VCard();

//complete date
Calendar c = Calendar.getInstance();
c.set(Calendar.YEAR, 1986);
c.set(Calendar.MONTH, Calendar.MARCH);
c.set(Calendar.DAY_OF_MONTH, 21);
Anniversary anniversary = new Anniversary();
anniversary.setDate(c.getTime(), false);
vcard.setAnniversary(anniversary);

//reduced accuracy date (see RFC 6350 p.12-14 for examples)
anniversary = new Anniversary();
anniversary.setPartialDate(PartialDate.date(null, 3, 21)); //March 21
vcard.setAnniversary(anniversary);

//plain text value
anniversary = new Anniversary();
anniversary.setText("more than 20 years ago");
vcard.setAnniversary(anniversary);
}}}

{{{
VCard vcard = ...
Anniversary anniversary = vcard.getAnniversary();
if (anniversary != null){
  if (anniversary.getDate() != null){
    System.out.println(anniversary.getDate());
  } else if (anniversary.getPartialDate() != null){
    System.out.println("Year: " + anniversary.getPartialDate().getYear());
    System.out.println("Month: " + anniversary.getPartialDate().getMonth());
    //...
  } else if (anniversary.getText() != null){
    System.out.println(anniversary.getText());
  }
}
}}}

=BDAY=
Defines the person's birthday.

*vCard versions:* 2.1, 3.0, 4.0

*Java class:* [https://ez-vcard.googlecode.com/svn/javadocs/latest/index.html?ezvcard/property/Birthday.html Birthday]

{{{
VCard vcard = new VCard();

//complete date
Calendar c = Calendar.getInstance();
c.set(Calendar.YEAR, 1986);
c.set(Calendar.MONTH, Calendar.MARCH);
c.set(Calendar.DAY_OF_MONTH, 21);
Birthday bday = new Birthday();
bday.setDate(c.getTime(), false);
vcard.setBirthday(bday);

//reduced accuracy date (vCard 4.0 only, see RFC 6350 p.12-14 for examples)
bday = new Birthday();
bday.setPartialDate(PartialDate.date(null, 3, 21)); //March 21
vcard.setBirthday(bday);

//plain text value (vCard 4.0 only)
bday = new Birthday();
bday.setText("a long time ago");
vcard.setBirthday(bday);
}}}

{{{
VCard vcard = ...
Birthday bday = vcard.getBirthday();
if (bday != null){
  if (bday.getDate() != null){
    System.out.println(bday.getDate());
  } else if (bday.getPartialDate() != null){
    System.out.println("Year: " + bday.getPartialDate().getYear());
    System.out.println("Month: " + bday.getPartialDate().getMonth());
    //...
  } else if (bday.getText() != null){
    System.out.println(bday.getText());
  }
}
}}}

=BIRTHPLACE=
Defines the location of the person's birth.

*vCard versions:* 4.0 (from [http://tools.ietf.org/html/rfc6474 RFC 6474]) 

*Java class:* [https://ez-vcard.googlecode.com/svn/javadocs/latest/index.html?ezvcard/property/Birthplace.html Birthplace]

{{{
VCard vcard = new VCard();

//URI (geo)
Birthplace birthplace = new Birthplace();
birthplace.setUri("geo:39.970806,-75.174809");
vcard.setBirthplace(birthplace);

//URI (website)
birthplace = new Birthplace();
birthplace.setUri("http://www.chop.edu");
vcard.setBirthplace(birthplace);

//text
birthplace = new Birthplace();
birthplace.setText("The Children's Hospital of Philadelphia");
vcard.setBirthplace(birthplace);

//text
birthplace = new Birthplace();
birthplace.setText("Philadelphia, PA");
vcard.setBirthplace(birthplace);
}}}

=CALADRURI=
A URL to use for sending a scheduling request to the person's calendar.

*vCard versions:* 4.0

*Java class:* [https://ez-vcard.googlecode.com/svn/javadocs/latest/index.html?ezvcard/property/CalendarRequestUri.html CalendarRequestUri]

{{{
VCard vcard = new VCard();
CalendarRequestUri caladruri = new CalendarRequestUri("mailto:janedoe@ibm.com");
caladruri.setPref(1);
vcard.addCalendarRequestUri(caladruri);
caladruri = new CalendarRequestUri("http://www.ibm.com/janedoe/calendar");
caladruri.setPref(2);
vcard.addCalendarRequestUri(caladruri);
}}}

=CALURI=
A URL to the person's calendar.

*vCard versions:* 4.0

*Java class:* [https://ez-vcard.googlecode.com/svn/javadocs/latest/index.html?ezvcard/property/CalendarUri.html CalendarUri]

{{{
VCard vcard = new VCard();
CalendarUri caluri = new CalendarUri("http://www.ibm.com/janedoe/calendar");
vcard.addCalendarUri(caluri);
}}}

=CATEGORIES=
A list of keywords (aka "tags") that can be used to describe the person.

*vCard versions:* 2.1, 3.0, 4.0

*Java class:* [https://ez-vcard.googlecode.com/svn/javadocs/latest/index.html?ezvcard/property/Categories.html Categories]

{{{
VCard vcard = new VCard();
Categories categories = new Categories();
categories.addValue("programmer");
categories.addValue("developer");
categories.addValue("java-coder");
categories.addValue("ladies-man");
vcard.setCategories(categories);
}}}

=CLASS=
Describes the sensitivity of the information in the vCard.

*vCard versions:* 3.0

*Java class:* [https://ez-vcard.googlecode.com/svn/javadocs/latest/index.html?ezvcard/property/Classification.html Classification]

{{{
VCard vcard = new VCard();
//sample values: PUBLIC, PRIVATE, CONFIDENTIAL
Classification classType = new Classification("PUBLIC");
vcard.setClassification(classType);
}}}

=CLIENTPIDMAP=
Maps a globally-unique URI to a PID parameter value.  The PID parameter can be set on any type where multiple instances are allowed (such as EMAIL or ADR, but not N because only 1 instance of N is allowed).  It allows an individual type instance to be uniquely identifiable.

The CLIENTPIDMAP type and the PID parameter are used during the synchronization (merging) process of two versions of the same vCard.  For example, if the user has a copy of her vCard on her desktop computer and her smart phone, and she makes different modifications to each copy, then the two copies could be synchronized in order to merge all the changes into a single, new vCard.

*vCard versions:* 4.0

*Java class:* [https://ez-vcard.googlecode.com/svn/javadocs/latest/index.html?ezvcard/property/ClientPidMap.html ClientPidMap]

{{{
VCard vcard = new VCard();

Address adr = new Address();
adr.addPid(1, 1);
vcard.addAddress(adr);

Email email = new Email("my-email@hotmail.com");
emai.addPid(1, 1);
vcard.addEmail(email);
email = new Email("my-other-email@yahoo.com");
emai.addPid(2, 2);
vcard.addEmail(email);

//specify the URI to use
ClientPidMap clientpidmap = new ClientPidMap(1, "urn:uuid:03a0e51f-d1aa-4385-8a53-e29025acd8af");
vcard.addClientPidMap(clientpidmap);

//generate a random URI
clientpidmap = ClientPidMap.random(2);
vcard.addClientPidMap(clientpidmap);
}}}

=DEATHDATE=
Defines the person's time of death.

*vCard versions:* 4.0 (from [http://tools.ietf.org/html/rfc6474 RFC 6474]) 

*Java class:* [https://ez-vcard.googlecode.com/svn/javadocs/latest/index.html?ezvcard/property/Deathdate.html Deathdate]

{{{
VCard vcard = new VCard();

//complete date
Calendar c = Calendar.getInstance();
c.set(Calendar.YEAR, 1954);
c.set(Calendar.MONTH, Calendar.JUNE);
c.set(Calendar.DAY_OF_MONTH, 7);
Deathdate deathdate = new Deathdate();
deathdate.setDate(c.getTime(), false);
vcard.setDeathdate(deathdate);

//reduced accuracy date
deathdate = new Deathdate();
deathdate.setPartialDate(PartialDate.date(nuull, 6, 7)); //June 7
vcard.setDeathdate(deathdate);

//plain text value
deathdate = new Deathdate();
deathdate.setText("circa 1954");
vcard.setDeathdate(deathdate);
}}}

{{{
VCard vcard = ...
Deathdate deathdate = vcard.getDeathdate();
if (deathdate != null){
  if (deathdate.getDate() != null){
    System.out.println(deathdate.getDate());
  } else if (deathdate.getPartialDate() != null){
    System.out.println("Year: " + deathdate.getPartialDate().getYear());
    System.out.println("Month: " + deathdate.getPartialDate().getMonth());
    //...
  } else if (deathdate.getText() != null){
    System.out.println(deathdate.getText());
  }
}
}}}

=DEATHPLACE=
Defines the location of the person's death.

*vCard versions:* 4.0 (from [http://tools.ietf.org/html/rfc6474 RFC 6474]) 

*Java class:* [https://ez-vcard.googlecode.com/svn/javadocs/latest/index.html?ezvcard/property/Deathplace.html Deathplace]

{{{
VCard vcard = new VCard();

//URI (geo)
Deathplace deathplace = new Deathplace();
deathplace.setUri("geo:46.176502,-122.191658");
vcard.setDeathplace(deathplace);

//text
deathplace = new Deathplace();
deathplace.setText("Mount St. Helens");
vcard.setDeathplace(deathplace);
}}}

=EMAIL=
An email address associated with a person.

*vCard versions:* 2.1, 3.0, 4.0

*Java class:* [https://ez-vcard.googlecode.com/svn/javadocs/latest/index.html?ezvcard/property/Email.html Email]

{{{
VCard vcard = new VCard();

Email email = new Email("superdude55@hotmail.com");
email.addType(EmailType.HOME);
vcard.addEmail(email);

email = new Email("doe.john@company.com");
email.addType(EmailType.WORK);
email.setPref(1); //the most preferred email
vcard.addEmail(email);
}}}

=EXPERTISE=
Defines a professional subject area that the person has knowledge of. For example, if the person is a Java software engineer, he or she might list technologies such as "servlets", "SOAP", and "Spring".

*vCard versions:* 4.0 (from [http://tools.ietf.org/html/rfc6715 RFC 6715])

*Java class:* [https://ez-vcard.googlecode.com/svn/javadocs/latest/index.html?ezvcard/property/Expertise.html Expertise]

{{{
VCard vcard = new VCard();
Expertise expertise = new Expertise("Java programming");
expertise.setLevel(ExpertiseLevel.EXPERT);
vcard.addExpertise(expertise);
}}}

=FBURL=
A URL that shows when the person is free/busy on their calendar.

*vCard versions:* 4.0

*Java class:* [https://ez-vcard.googlecode.com/svn/javadocs/latest/index.html?ezvcard/property/FbUrl.html FbUrl]

{{{
VCard vcard = new VCard();
FbUrl fburl = new FbUrl("http://www.example.com/freebusy/janedoe");
vcard.addFbUrl(fburl);
}}}

=FN=
Shows how the person's name should be displayed.

*vCard versions:* 2.1, 3.0, 4.0

*Java class:* [https://ez-vcard.googlecode.com/svn/javadocs/latest/index.html?ezvcard/property/FormattedName.html FormattedName]

{{{
VCard vcard = new VCard();
FormattedName fn = new FormattedName("Dr. Gregory House M.D.");
vcard.setFormattedName(fn);
}}}

=GENDER=
Defines the person's sex.

*vCard versions:* 4.0

*Java class:* [https://ez-vcard.googlecode.com/svn/javadocs/latest/index.html?ezvcard/property/Gender.html Gender]

{{{
VCard vcard = new VCard();
Gender gender = Gender.male();
vcard.setGender(gender);
}}}

{{{
VCard vcard = ...
Gender gender = vcard.getGender();
if (gender != null){
  if (gender.isMale()){
    ...
  } else if (gender.isFemale()){
    ...
  }
  ...
}
}}}

=GEO=
A set of latitude/longitude coordinates. There is no rule for what these coordinates must represent, but the meaning could vary depending on the value of the vCard KIND type.
 
 * "individual": the location of the person's home or workplace.
 * "group": the location of the group's meeting place.
 * "org": the coordinates of the organization's headquarters.
 * "location": the coordinates of the location itself.

*vCard versions:* 2.1, 3.0, 4.0

*Java class:* [https://ez-vcard.googlecode.com/svn/javadocs/latest/index.html?ezvcard/property/Geo.html Geo]

{{{
VCard vcard = new VCard();
Geo geo = new Geo(-123.456, 12.54);
vcard.setGeo(geo);
}}}

=HOBBY=
Defines a recreational activity that the person actively engages in. For example, if a person has a HOBBY of "hockey", it would mean that he likes to play hockey. Someone who just likes to _watch_ hockey would list "hockey" as an INTEREST instead.

*vCard versions:* 4.0 (from [http://tools.ietf.org/html/rfc6715 RFC 6715])

*Java class:* [https://ez-vcard.googlecode.com/svn/javadocs/latest/index.html?ezvcard/property/Hobby.html Hobby]

{{{
//someone who likes to wind surf during the summer, but rents a boat instead of owning one
VCard vcard = new VCard();
Hobby hobby = new Hobby("wind surfing");
hobby.setLevel(HobbyLevel.LOW);
vcard.addHobby(hobby);
}}}

=IMPP=
An instant message handle.  The handle is represented as a URI in the format "`<IM-PROTOCOL>:<IM-HANDLE>`".  For example, someone with a Yahoo! Messenger handle of "johndoe@yahoo.com" would have an IMPP vCard property value of "ymsgr:johndoe@yahoo.com".

*vCard versions:* 3.0, 4.0

*Java class:* [https://ez-vcard.googlecode.com/svn/javadocs/latest/index.html?ezvcard/property/Impp.html Impp]

{{{
VCard vcard = new VCard();

//URI
Impp impp = new Impp("aim:johndoe@aol.com");
vcard.addImpp(impp);

//static helper constructors
impp = Impp.msn("janedoe@msn.com");
vcard.addImpp(impp);
}}}

=INTEREST=
Defines a recreational activity that the person is interested in. For example, if a person has a INTEREST of "hockey", it would mean that he likes to watch hockey games. Someone who likes to actually _play_ hockey would list "hockey" as a HOBBY instead.

*vCard versions:* 4.0 (from [http://tools.ietf.org/html/rfc6715 RFC 6715])

*Java class:* [https://ez-vcard.googlecode.com/svn/javadocs/latest/index.html?ezvcard/property/Interest.html Interest]

{{{
//someone who attends all of his favorite hockey team's games in person.
VCard vcard = new VCard();
Interest interest = new Interest("hockey");
interest.setLevel(InterestLevel.HIGH);
vcard.addInterest(interest);
}}}

=KEY=
A public key for encryption.

*vCard versions:* 2.1, 3.0, 4.0

*Java class:* [https://ez-vcard.googlecode.com/svn/javadocs/latest/index.html?ezvcard/property/Key.html Key]

{{{
VCard vcard = new VCard();

//URL (vCard 4.0 only; KEYs cannot have URLs in vCard 2.1 and 3.0)
Key key = new Key("http://www.mywebsite.com/pubkey.pgp", KeyType.PGP);
vcard.addKey(key);

//binary data
byte data[] = ...
key = new Key(data, KeyType.PGP);
vcard.addKey(key);

//plain text value
key = new Key();
key.setText("...", KeyType.PGP);
vcard.addKey(key);

//if "KeyType" does not have the pre-defined constant that you need, then create a new instance
//arg 1: the value of the 2.1/3.0 TYPE parameter
//arg 2: the value to use for the 4.0 MEDIATYPE parameter and for 4.0 data URIs
//arg 3: the file extension of the data type (optional)
KeyType param = new KeyType("mykey", "application/my-key", "mkey");
key = new Key("http://www.mywebsite.com/pubkey.enc", param);
vcard.addKey(key);
}}}

{{{
VCard vcard = ...

int fileCount = 0;
for (Key key : vcard.getKeys()){
  //the key will have either a URL or a binary data
  //only 4.0 vCards are allowed to use URLs for keys
  if (key.getData() == null){
    System.out.println("Key URL: " + key.getUrl());
  } else {
    KeyType type = key.getContent();
    
    if (type == null) {
      //the vCard may not have any content type data associated with the key
      System.out.println("Saving a key file...");
    } else {
      System.out.println("Saving a \"" + type.getMedia() + "\" file...");
    }
    
    String folder;
    if (type == KeyType.PGP){ //it is safe to use "==" instead of "equals()"
      folder = "pgp-keys";
    } else {
      folder = "other-keys";
    }
    
    byte data[] = key.getData();
    String filename = "key" + fileCount;
    if (type != null && type.getExtension() != null){
    	filename += "." + type.getExtension();
    }
    OutputStream out = new FileOutputStream(new File(folder, filename));
    out.write(data);
    out.close();
    fileCount++;
  }
}
}}}

=KIND=
Defines the type of entity that this vCard represents, such as an individual or an organization.

*vCard versions:* 4.0

*Java class:* [https://ez-vcard.googlecode.com/svn/javadocs/latest/index.html?ezvcard/property/Kind.html Kind]

{{{
//use static methods to create a Kind object
VCard vcard = new VCard();
Kind kind = Kind.individual();
vcard.setKind(kind);
}}}

{{{
//use "is*" methods to determine the Kind value
VCard vcard = ...
Kind kind = vcard.getKind();
if (kind != null){
  if (kind.isIndividual()){
    ...
  } else if (kind.isGroup()){
    ...
  }
  ...
}
}}}

=LABEL=
Defines the exact text to put on the mailing label when mailing a package or letter to the person.

*vCard versions:* 2.1, 3.0, 4.0`*`

*Java class:* [https://ez-vcard.googlecode.com/svn/javadocs/latest/index.html?ezvcard/property/Label.html Label]

`*`The LABEL type is not supported in 4.0.  Instead, labels are included as a parameter to their corresponding ADR.  When marshalling a vCard, ez-vcard will use either the LABEL type or the LABEL parameter, depending on the requested vCard version.

Use the `Address.setLabel()` method to assign a label to an address.

{{{
VCard vcard = new VCard();
Address adr = new Address();
adr.setStreetAddress("123 Main St.");
adr.setLocality("Austin");
adr.setRegion("TX");
adr.setPostalCode("12345");
adr.setLabel("123 Main St.\nAustin, TX 12345"); //newlines are allowed
vcard.addAddress(adr);
}}}

The `VCard.addOrphanedLabel()` method adds a LABEL type to the vCard. However, use of this method is discouraged because it creates a LABEL type that's not associated with an address.  Also, orphaned LABELs are ignored when creating version 4.0 vCards because the LABEL type is not supported by vCard 4.0.

The `VCard.getOrphanedLabels()` method can be used after parsing a version 2.1 or 3.0 vCard to retrieve any LABEL types which the parser could not assign to an address (ADR type).  A LABEL is assigned to an ADR if the LABEL's list of TYPE parameters is identical to the ADR's list of TYPE parameters.

{{{
VCard vcard = ...
for (Label label : vcard.getOrphanedLabels()){
  System.out.println(label.getValue());
}
}}}

=LANG=
A language that the person reads/speaks.

*vCard versions:* 4.0

*Java class:* [https://ez-vcard.googlecode.com/svn/javadocs/latest/index.html?ezvcard/property/Language.html Language]

{{{
VCard vcard = new VCard();
Language lang = new Language("en");
lang.setPref(1); //most preferred
vcard.addLanguage(lang);
lang = new Language("fr");
lang.setPref(2); //second-most preferred
vcard.addLanguage(lang);
}}}

=LOGO=
A company logo.

*vCard versions:* 2.1, 3.0, 4.0

*Java class:* [https://ez-vcard.googlecode.com/svn/javadocs/latest/index.html?ezvcard/property/Logo.html Logo]

{{{
VCard vcard = new VCard();

//URL
Logo logo = new Logo("http://www.company.com/logo.png", ImageType.PNG);
vcard.addLogo(logo);

//binary data
byte data[] = ...
logo = new Logo(data, ImageType.PNG);
vcard.addLogo(logo);

//if "ImageType" does not have the pre-defined constant that you need, then create a new instance
//arg 1: the value of the 2.1/3.0 TYPE parameter
//arg 2: the value to use for the 4.0 MEDIATYPE parameter and for 4.0 data URIs
//arg 3: the file extension of the data type (optional)
ImageKeyType param = new ImageType("bmp", "image/x-ms-bmp", "bmp");
logo = new Logo("http://www.company.com/logo.bmp", param);
vcard.addLogo(logo);
}}}

{{{
VCard vcard = ...

int fileCount = 0;
for (Logo logo : vcard.getLogos()){
  //the logo will have either a URL or a binary data
  if (logo.getData() == null){
    System.out.println("Logo URL: " + logo.getUrl());
  } else {
    ImageType type = logo.getContent();
    
    if (type == null) {
      //the vCard may not have any content type data associated with the logo
      System.out.println("Saving a logo file...");
    } else {
      System.out.println("Saving a \"" + type.getMedia() + "\" file...");
    }
    
    String folder;
    if (type == ImageType.PNG){ //it is safe to use "==" instead of "equals()"
      folder = "png-files";
    } else {
      folder = "image-files";
    }
    
    byte data[] = logo.getData();
    String filename = "logo" + fileCount;
    if (type != null && type.getExtension() != null){
    	filename += "." + type.getExtension();
    }
    OutputStream out = new FileOutputStream(new File(folder, filename));
    out.write(data);
    out.close();
    fileCount++;
  }
}
}}}

=MAILER=
The email client that the person uses.

*vCard versions:* 2.1, 3.0

*Java class:* [https://ez-vcard.googlecode.com/svn/javadocs/latest/index.html?ezvcard/property/Mailer.html Mailer]

{{{
VCard vcard = new VCard();
Mailer mailer = new Mailer("Thunderbird");
vcard.setMailer(mailer);
}}}

=MEMBER=
The members that make up the group.  This type can only be used if the KIND type is set to "group".

*vCard versions:* 4.0

*Java class:* [https://ez-vcard.googlecode.com/svn/javadocs/latest/index.html?ezvcard/property/Member.html Member]

{{{
VCard vcard = new VCard();

//KIND must be set to "group" in order to add MEMBERs
vcard.setKind(Kind.group());

Member member = new Member();
member.setUriEmail("funkyjoe@hotmail.com");
vcard.addMember(member);
member = new Member();
member.setUriIM("aol", "joesmoe@aol.com");
vcard.addMember(member);
member = new Member();
member.setUriTelephone("+1-123-555-6789");
vcard.addMember(member);
member = new Member();
member.setUri("urn:uuid:03a0e51f-d1aa-4385-8a53-e29025acd8af"); //references the UID from another vCard
vcard.addMember(member);
}}}

{{{
VCard vcard = ...
Kind kind = vcard.getKind();
if (kind != null){
  if (kind.isGroup()){
    System.out.println("The group's members are:");
    for (Member member : vcard.getMembers()){
      System.out.println(member.getUri());
    }
  }
}
}}}
  
=N=
Contains the separated components of the person's name.

Multiple instances of this type can be added *ONLY* if each instance has an ALTID parameter and the value of the ALTID parameter is the same across all instances.  However, this is a border-case; under most circumstances, you will only need to add one instance.

*vCard versions:* 2.1, 3.0, 4.0

*Java class:* [https://ez-vcard.googlecode.com/svn/javadocs/latest/index.html?ezvcard/property/StructuredName.html StructuredName]

{{{
VCard vcard = new VCard();
StructuredName n = new StructuredName();
n.setFamily("House");
n.setGiven("Gregory");
n.addPrefix("Dr");
n.addSuffix("MD");
vcard.setStructuredName(n);
}}}

=NAME=
Provides a textual representation of the SOURCE type.

*vCard versions:* 3.0

*Java class:* [https://ez-vcard.googlecode.com/svn/javadocs/latest/index.html?ezvcard/property/SourceDisplayText.html SourceDisplayText]

{{{
VCard vcard = new VCard();
SourceDisplayText name = new SourceDisplayText("My vCard");
vcard.setSourceDisplayText(name);
}}}

=NICKNAME=
A list of nicknames the person goes by.

*vCard versions:* 3.0, 4.0

*Java class:* [https://ez-vcard.googlecode.com/svn/javadocs/latest/index.html?ezvcard/property/Nickname.html Nickname]

{{{
VCard vcard = new VCard();
Nickname nickname = new Nickname();
nickname.addValue("Rick");
nickname.addValue("Ricky");
nickname.addValue("Bobby");
vcard.setNickname(nickname);
}}}

=NOTE=
A free-form text field that contains miscellaneous information.

*vCard versions:* 2.1, 3.0, 4.0

*Java class:* [https://ez-vcard.googlecode.com/svn/javadocs/latest/index.html?ezvcard/property/Note.html Note]

{{{
VCard vcard = new VCard();
Note note = new Note("This is a\nmiscellaneous comment."); //can contain newlines
note.setLanguage("en-us");
vcard.addNote(note);
}}}

=ORG=
A list of organizations the person belongs to.  The list is ordered.  It starts with the broadest organization and ends with the most specific.

*vCard versions:* 2.1, 3.0, 4.0

*Java class:* [https://ez-vcard.googlecode.com/svn/javadocs/latest/index.html?ezvcard/property/Organization.html Organization]

{{{
VCard vcard = new VCard();
Organization org = new Organization();
org.addValue("Google");
org.addValue("GMail Team");
org.addValue("Spam Detection Team");
vcard.setOrganizations(org);
}}}

=ORG-DIRECTORY=
Defines a URI representing the person's work place, which can be used to lookup information on the person's co-workers.

*vCard versions:* 4.0 (from [http://tools.ietf.org/html/rfc6715 RFC 6715])

*Java class:* [https://ez-vcard.googlecode.com/svn/javadocs/latest/index.html?ezvcard/property/OrgDirectory.html OrgDirectory]

{{{
VCard vcard = new VCard();
OrgDirectory orgDirectory = new OrgDirectory("http://www.company.com/staff");
vcard.addOrgDirectory(orgDirectory);
}}}

=PHOTO=
A photo attached to the vCard (such as a portrait of the person).

*vCard versions:* 2.1, 3.0, 4.0

*Java class:* [https://ez-vcard.googlecode.com/svn/javadocs/latest/index.html?ezvcard/property/Photo.html Photo]

{{{
VCard vcard = new VCard();

//URL
Photo photo = new Photo("http://www.mywebsite.com/mugshot.jpg", ImageType.JPEG);
vcard.addPhoto(photo);

//binary data
byte data[] = ...
photo = new Photo(data, ImageType.JPEG);
vcard.addPhoto(photo);

//if "ImageType" does not have the pre-defined constant that you need, then create a new instance
//arg 1: the value of the 2.1/3.0 TYPE parameter
//arg 2: the value to use for the 4.0 MEDIATYPE parameter and for 4.0 data URIs
//arg 3: the file extension of the data type (optional)
ImageKeyType param = new ImageType("bmp", "image/x-ms-bmp", "bmp");
photo = new Photo("http://www.mywebsite.com/mugshot.bmp", param);
vcard.addPhoto(photo);
}}}

{{{
VCard vcard = ...

int fileCount = 0;
for (Photo photo : vcard.getPhotos()){
  //the photo will have either a URL or a binary data
  if (photo.getData() == null){
    System.out.println("Photo URL: " + photo.getUrl());
  } else {
    ImageType type = photo.getContent();
    
    if (type == null) {
      //the vCard may not have any content type data associated with the photo
      System.out.println("Saving a photo file...");
    } else {
      System.out.println("Saving a \"" + type.getMedia() + "\" file...");
    }
    
    String folder;
    if (type == ImageType.JPEG){ //it is safe to use "==" instead of "equals()"
      folder = "photos";
    } else {
      folder = "images";
    }
    
    byte data[] = photo.getData();
    String filename = "photo" + fileCount;
    if (type != null && type.getExtension() != null){
    	filename += "." + type.getExtension();
    }
    OutputStream out = new FileOutputStream(new File(folder, filename));
    out.write(data);
    out.close();
    fileCount++;
  }
}
}}}

=PRODID=
Defines the product that created the vCard.

*vCard versions:* 3.0, 4.0

*Java class:* [https://ez-vcard.googlecode.com/svn/javadocs/latest/index.html?ezvcard/property/ProdId.html ProdId]

{{{
VCard vcard = new VCard();
ProdId prodid = new ProdId("ez-vcard 0.6.0");
vcard.setProdId(prodid);
}}}

=PROFILE=
Marks the vCard as being a vCard (it is generally not needed).

*vCard versions:* 3.0

*Java class:* [https://ez-vcard.googlecode.com/svn/javadocs/latest/index.html?ezvcard/property/Profile.html Profile]

{{{
VCard vcard = new VCard();
Profile profile = new Profile();
vcard.setProfile(profile);
}}}

=RELATED=
Other people that the person is related to.  It can contain either a URI or a plain text value.

*vCard versions:* 4.0

*Java class:* [https://ez-vcard.googlecode.com/svn/javadocs/latest/index.html?ezvcard/property/Related.html Related]

{{{
VCard vcard = new VCard();

Related related = new Related();
related.addType(RelatedType.FRIEND);
related.setUri("urn:uuid:03a0e51f-d1aa-4385-8a53-e29025acd8af");
vcard.addRelated(related);

related = new Related();
related.addType(RelatedType.CO_WORKER);
related.addType(RelatedType.FRIEND);
related.setUri("http://joesmoe.name/vcard.vcf");
vcard.addRelated(related);

related = new Related();
related.addType(RelatedType.SPOUSE);
related.setText("My wife's name is Edna Smith");
vcard.addRelated(related);
}}}

=REV=
The date that the vCard was last modified by its owner.

*vCard versions:* 2.1, 3.0, 4.0

*Java class:* [https://ez-vcard.googlecode.com/svn/javadocs/latest/index.html?ezvcard/property/Revision.html Revision]

{{{
VCard vcard = new VCard();
Revision rev = new Revision(new Date());
vcard.setRevision(rev);
}}}

=ROLE=
The function that the person plays in his or her organization.

*vCard versions:* 2.1, 3.0, 4.0

*Java class:* [https://ez-vcard.googlecode.com/svn/javadocs/latest/index.html?ezvcard/property/Role.html Role]

{{{
VCard vcard = new VCard();
Role role = new Role("Project Leader");
vcard.addRole(role);
}}}

=SORT-STRING=
Defines a string that should be used when an application sorts this vCard in some way.

*vCard versions:* 2.1, 3.0, 4.0`*`

*Java class:* [https://ez-vcard.googlecode.com/svn/javadocs/latest/index.html?ezvcard/property/SortString.html SortString]

`*`The SORT-STRING type is not supported in 4.0.  Instead, a SORT-AS parameter can be added to the N (`StructuredName`) and/or ORG (`Organization`) types.

{{{
//2.1 and 3.0
VCard vcard = new VCard();
StructuredName n = new StructuredName();
n.setFamily("d'Armour");
n.setGiven("Miles");
vcard.setStructuredName(n);
SortString sortString = new SortString("Armour");
vcard.setSortString(sortString);

//4.0
VCard vcard = new VCard();
StructuredName n = new StructuredName();
n.setFamily("d'Armour");
n.setGiven("Miles");
n.setSortAs("Armour");
vcard.setStructuredName(n);
}}}

=SOUND=
A sound to attach to the vCard, such as a pronunciation of the person's name.

*vCard versions:* 2.1, 3.0, 4.0

*Java class:* [https://ez-vcard.googlecode.com/svn/javadocs/latest/index.html?ezvcard/property/Sound.html Sound]

{{{
VCard vcard = new VCard();

//URL
Sound sound = new Sound("http://www.mywebsite.com/myname.ogg", SoundType.OGG);
vcard.addSound(sound);

//binary data
byte data[] = ...
sound = new Sound(data, SoundType.OGG);
vcard.addSound(sound);

//if "SoundType" does not have the pre-defined constant that you need, then create a new instance
//arg 1: the value of the 2.1/3.0 TYPE parameter
//arg 2: the value to use for the 4.0 MEDIATYPE parameter and for 4.0 data URIs
//arg 3: the file extension of the data type (optional)
SoundType param = new SoundType("wav", "audio/wav", "wav");
sound = new Sound("http://www.mywebsite.com/myname.wav", SoundType.WAV);
vcard.addSound(sound);
}}}

{{{
VCard vcard = ...

int fileCount = 0;
for (Sound sound : vcard.getSounds()){
  //the sound will have either a URL or a binary data
  if (sound.getData() == null){
    System.out.println("Sound URL: " + sound.getUrl());
  } else {
    SoundType type = sound.getContent();
    
    if (type == null) {
      //the vCard may not have any content type data associated with the sound
      System.out.println("Saving a sound file...");
    } else {
      System.out.println("Saving a \"" + type.getMedia() + "\" file...");
    }
    
    String folder;
    if (type == SoundType.OGG){ //it is safe to use "==" instead of "equals()"
      folder = "ogg-files";
    } else {
      folder = "sound-files";
    }
    
    byte data[] = sound.getData();
    String filename = "sound" + fileCount;
    if (type != null && type.getExtension() != null){
    	filename += "." + type.getExtension();
    }
    OutputStream out = new FileOutputStream(new File(folder, filename));
    out.write(data);
    out.close();
    fileCount++;
  }
}
}}}

=SOURCE=
A URL that can be used to retrieve the most up-to-date version of the person's vCard.

*vCard versions:* 3.0, 4.0

*Java class:* [https://ez-vcard.googlecode.com/svn/javadocs/latest/index.html?ezvcard/property/Source.html Source]

{{{
VCard vcard = new VCard();
Source source = new Source("http://www.company.com/employees/doe_john.vcf");
vcard.addSource(source);
}}}

=TEL=
A telephone number that the person can be reached at.

*vCard versions:* 2.1, 3.0, 4.0

*Java class:* [https://ez-vcard.googlecode.com/svn/javadocs/latest/index.html?ezvcard/property/Telephone.html Telephone]

{{{
VCard vcard = new VCard();
Telephone tel = new Telephone("(123) 555-6789");
tel.addType(TelephoneType.HOME);
tel.setPref(2); //the second-most preferred
vcard.addTelephoneNumber(tel);

TelUri uri = TelUri.global("+1-800-555-9876");
uri.setExtension("111");
tel = new Telephone(uri);
tel.addType(TelephoneType.WORK);
tel.setPref(1); //the most preferred
vcard.addTelephoneNumber(tel);
}}}

=TZ=
Contains the timezone that the person lives/works in.

*vCard versions:* 2.1, 3.0, 4.0

*Java class:* [https://ez-vcard.googlecode.com/svn/javadocs/latest/index.html?ezvcard/property/Timezone.html Timezone]

{{{
VCard vcard = new VCard();
Timezone tz = new Timezone(-5, 0, "America/New_York");
vcard.addTimezone(tz);
}}}

=TITLE=
The person's position or job in his or her organization.

*vCard versions:* 2.1, 3.0, 4.0

*Java class:* [https://ez-vcard.googlecode.com/svn/javadocs/latest/index.html?ezvcard/property/Title.html Title]

{{{
VCard vcard = new VCard();
Title title = new Title("Research Scientist");
vcard.addTitle(title);
}}}

=UID=
A globally unique identifier of the person.

*vCard versions:* 2.1, 3.0, 4.0

*Java class:* [https://ez-vcard.googlecode.com/svn/javadocs/latest/index.html?ezvcard/property/Uid.html Uid]

{{{
VCard vcard = new VCard();

Uid uid = new Uid("urn:uuid:b8767877-b4a1-4c70-9acc-505d3819e519");
vcard.setUid(uid);

//generate a random UID
uid = Uid.random();
vcard.setUid(uid);
}}}

=URL=
A URL pointing to the person's homepage or business website.

*vCard versions:* 2.1, 3.0, 4.0

*Java class:* [https://ez-vcard.googlecode.com/svn/javadocs/latest/index.html?ezvcard/property/Url.html Url]

{{{
VCard vcard = new VCard();
Url url = new Url("http://www.company.com");
vcard.addUrl(url);
}}}

=XML=
Any XML data that is attached to the vCard.  This is used if the vCard was encoded in XML (xCard standard) and the XML document contained elements which are not part of the xCard standard.

*vCard versions:* 4.0

*Java class:* [https://ez-vcard.googlecode.com/svn/javadocs/latest/index.html?ezvcard/property/Xml.html Xml]

{{{
VCard vcard = new VCard();
Xml xml = new Xml("<b>Some xml</b>");
vcard.addXml(xml);
}}}