#summary Contains a listing of all vCard types (such as "ADR" and "N"), along with code samples
#labels Featured

The page contains a listing of all vCard types, as well as information on how to use these types with ez-vcard.

=ADR=
Defines a mailing address.

*vCard versions:* 2.1, 3.0, 4.0

*Java class:* [http://mikeangstadt.name/ezvcard/latest/index.html?ezvcard/types/AddressType.html AddressType]

{{{
VCard vcard = new VCard();
AddressType adr = new AddressType();
adr.setStreetAddress("123 Main St.");
adr.setLocality("Austin");
adr.setRegion("TX");
adr.setPostalCode("12345");
adr.setCountry("USA");
adr.addType(AddressTypeParameter.WORK);
adr.addType(AddressTypeParameter.DOM);

//optionally, provide the exact text to print out on the mailing label
adr.setLabel("123 Main St.\nAustin, Tx 12345\nUSA");

vcard.addAddress(adr);
}}}

{{{
VCard vcard = ...
for (AddressType adr : vcard.getAddresses()){
  ...
}
}}}

=AGENT=
An embedded vCard or URL containing the information of someone who represents the person.

*vCard versions:* 2.1, 3.0

*Java class:* [http://mikeangstadt.name/ezvcard/latest/index.html?ezvcard/types/AgentType.html AgentType]

{{{
//URL
VCard vcard = new VCard();
AgentType agent = new AgentType("http://mi5.gov.uk/007");
vcard.setAgent(agent);

//vCard
VCard vcard = new VCard();
VCard agentVcard = new VCard();
agentVcard.setFormattedName(new FormattedNameType("Agent 007"));
AgentType agent = new AgentType(agentVcard);
vcard.setAgent(agent);
}}}

=ANNIVERSARY=
Defines the person's anniversary.

*vCard versions:* 4.0

*Java class:* [http://mikeangstadt.name/ezvcard/latest/index.html?ezvcard/types/AnniversaryType.html AnniversaryType]

{{{
VCard vcard = new VCard();

//complete date
Calendar c = Calendar.getInstance();
c.set(Calendar.YEAR, 1986);
c.set(Calendar.MONTH, Calendar.MARCH);
c.set(Calendar.DAY_OF_MONTH, 21);
AnniversaryType anniversary = new AnniversaryType();
anniversary.setDate(c.getTime(), false);
vcard.setAnniversary(anniversary);

//reduced accuracy date (see RFC 6350 p.12-14 for examples)
anniversary = new AnniversaryType();
anniversary.setReducedAccuracyDate("--0321"); //March 21
vcard.setAnniversary(anniversary);

//plain text value
anniversary = new AnniversaryType();
anniversary.setText("more than 20 years ago");
vcard.setAnniversary(anniversary);
}}}

{{{
VCard vcard = ...
AnniversaryType anniversary = vcard.getAnniversary();
if (anniversary != null){
  if (anniversary.getDate() != null){
    System.out.println(anniversary.getDate());
  } else if (anniversary.getReducedAccuracyDate() != null){
    System.out.println(anniversary.getReducedAccuracyDate());
  } else if (anniversary.getText() != null){
    System.out.println(anniversary.getText());
  }
}
}}}

=BDAY=
Defines the person's birthday.

*vCard versions:* 2.1, 3.0, 4.0

*Java class:* [http://mikeangstadt.name/ezvcard/latest/index.html?ezvcard/types/BirthdayType.html BirthdayType]

{{{
VCard vcard = new VCard();

//complete date
Calendar c = Calendar.getInstance();
c.set(Calendar.YEAR, 1986);
c.set(Calendar.MONTH, Calendar.MARCH);
c.set(Calendar.DAY_OF_MONTH, 21);
BirthdayType bday = new BirthdayType();
bday.setDate(c.getTime(), false);
vcard.setBirthday(bday);

//reduced accuracy date (vCard 4.0 only, see RFC 6350 p.12-14 for examples)
bday = new BirthdayType();
bday.setReducedAccuracyDate("--0321"); //March 21
vcard.setBirthday(bday);

//plain text value (vCard 4.0 only)
bday = new BirthdayType();
bday.setText("a long time ago");
vcard.setBirthday(bday);
}}}

{{{
VCard vcard = ...
BirthdayType bday = vcard.getBirthday();
if (bday != null){
  if (bday.getDate() != null){
    System.out.println(bday.getDate());
  } else if (bday.getReducedAccuracyDate() != null){
    System.out.println(bday.getReducedAccuracyDate());
  } else if (bday.getText() != null){
    System.out.println(bday.getText());
  }
}
}}}

=BIRTHPLACE=
Defines the location of the person's birth.

*vCard versions:* 4.0 (from [http://tools.ietf.org/html/rfc6474 RFC 6474]) 

*Java class:* [http://mikeangstadt.name/ezvcard/latest/index.html?ezvcard/types/BirthplaceType.html BirthplaceType]

{{{
VCard vcard = new VCard();

//URI (geo)
BirthplaceType birthplace = new BirthplaceType();
birthplace.setUri("geo:39.970806,-75.174809");
vcard.setBirthplace(birthplace);

//URI (website)
birthplace = new BirthplaceType();
birthplace.setUri("http://www.chop.edu");
vcard.setBirthplace(birthplace);

//text
birthplace = new BirthplaceType();
birthplace.setText("The Children's Hospital of Philadelphia");
vcard.setBirthplace(birthplace);

//text
birthplace = new BirthplaceType();
birthplace.setText("Philadelphia, PA");
vcard.setBirthplace(birthplace);
}}}

=CALENDRURI=
A URL to use for sending a scheduling request to the person's calendar.

*vCard versions:* 4.0

*Java class:* [http://mikeangstadt.name/ezvcard/latest/index.html?ezvcard/types/CalendarRequestUriType.html CalendarRequestUriType]

{{{
VCard vcard = new VCard();
CalendarRequestUriType calendruri = new CalendarRequestUriType("mailto:janedoe@ibm.com");
calendruri.setPref(1);
vcard.addCalendarRequestUri(calendruri);
calendruri = new CalendarRequestUriType("http://www.ibm.com/janedoe/calendar");
calendruri.setPref(2);
vcard.addCalendarRequestUri(calendruri);
}}}

=CALURI=
A URL to the person's calendar.

*vCard versions:* 4.0

*Java class:* [http://mikeangstadt.name/ezvcard/latest/index.html?ezvcard/types/CalendarUriType.html CalendarUriType]

{{{
VCard vcard = new VCard();
CalendarUriType caluri = new CalendarUriType("http://www.ibm.com/janedoe/calendar");
vcard.addCalendarUri(caluri);
}}}

=CATEGORIES=
A list of keywords (aka "tags") that can be used to describe the person.

*vCard versions:* 2.1, 3.0, 4.0

*Java class:* [http://mikeangstadt.name/ezvcard/latest/index.html?ezvcard/types/CategoriesType.html CategoriesType]

{{{
VCard vcard = new VCard();
CategoriesType categories = new CategoriesType();
categories.addValue("programmer");
categories.addValue("developer");
categories.addValue("java-coder");
categories.addValue("ladies-man");
vcard.setCategories(categories);
}}}

=CLASS=
Describes the sensitivity of the information in the vCard.

*vCard versions:* 3.0

*Java class:* [http://mikeangstadt.name/ezvcard/latest/index.html?ezvcard/types/ClassificationType.html ClassificationType]

{{{
VCard vcard = new VCard();
//sample values: PUBLIC, PRIVATE, CONFIDENTIAL
ClassificationType classType = new ClassificationType("PUBLIC");
vcard.setClassification(classType);
}}}

=CLIENTPIDMAP=
Maps a globally-unique URI to a PID parameter value.  The PID parameter can be set on any type where multiple instances are allowed (such as EMAIL or ADR, but not N because only 1 instance of N is allowed).  It allows an individual type instance to be uniquely identifiable.

The CLIENTPIDMAP type and the PID parameter are used during the synchronization (merging) process of two versions of the same vCard.  For example, if the user has a copy of her vCard on her desktop computer and her smart phone, and she makes different modifications to each copy, then the two copies could be synchronized in order to merge all the changes into a single, new vCard.

*vCard versions:* 4.0

*Java class:* [http://mikeangstadt.name/ezvcard/latest/index.html?ezvcard/types/ClientPidMapType.html ClientPidMapType]

{{{
VCard vcard = new VCard();

AddressType adr = new AddressType();
adr.addPid(1, 1);
vcard.addAddress(adr);

EmailType email = new EmailType("my-email@hotmail.com");
emai.addPid(1, 1);
vcard.addEmail(email);
email = new EmailType("my-other-email@yahoo.com");
emai.addPid(2, 2);
vcard.addEmail(email);

//specify the URI to use
ClientPidMapType clientpidmap = new ClientPidMapType(1, "urn:uuid:03a0e51f-d1aa-4385-8a53-e29025acd8af");
vcard.addClientPidMap(clientpidmap);

//generate a random URI
clientpidmap = ClientPidMapType.random(2);
vcard.addClientPidMap(clientpidmap);
}}}

=DEATHDATE=
Defines the person's time of death.

*vCard versions:* 4.0 (from [http://tools.ietf.org/html/rfc6474 RFC 6474]) 

*Java class:* [http://mikeangstadt.name/ezvcard/latest/index.html?ezvcard/types/DeathdateType.html DeathdateType]

{{{
VCard vcard = new VCard();

//complete date
Calendar c = Calendar.getInstance();
c.set(Calendar.YEAR, 1954);
c.set(Calendar.MONTH, Calendar.JUNE);
c.set(Calendar.DAY_OF_MONTH, 7);
DeathdateType deathdate = new DeathdateType();
deathdate.setDate(c.getTime(), false);
vcard.setDeathdate(deathdate);

//reduced accuracy date
deathdate = new DeathdateType();
deathdate.setReducedAccuracyDate("--0607"); //June 7
vcard.setDeathdate(deathdate);

//plain text value
deathdate = new DeathdateType();
deathdate.setText("circa 1954");
vcard.setDeathdate(deathdate);
}}}

{{{
VCard vcard = ...
DeathdateType deathdate = vcard.getDeathdate();
if (deathdate != null){
  if (deathdate.getDate() != null){
    System.out.println(deathdate.getDate());
  } else if (deathdate.getReducedAccuracyDate() != null){
    System.out.println(deathdate.getReducedAccuracyDate());
  } else if (deathdate.getText() != null){
    System.out.println(deathdate.getText());
  }
}
}}}

=DEATHPLACE=
Defines the location of the person's death.

*vCard versions:* 4.0 (from [http://tools.ietf.org/html/rfc6474 RFC 6474]) 

*Java class:* [http://mikeangstadt.name/ezvcard/latest/index.html?ezvcard/types/DeathplaceType.html DeathplaceType]

{{{
VCard vcard = new VCard();

//URI (geo)
DeathplaceType deathplace = new DeathplaceType();
deathplace.setUri("geo:46.176502,-122.191658");
vcard.setDeathplace(deathplace);

//text
deathplace = new DeathplaceType();
deathplace.setText("Mount St. Helens");
vcard.setDeathplace(deathplace);
}}}

=EMAIL=
An email address associated with a person.

*vCard versions:* 2.1, 3.0, 4.0

*Java class:* [http://mikeangstadt.name/ezvcard/latest/index.html?ezvcard/types/EmailType.html EmailType]

{{{
VCard vcard = new VCard();

EmailType email = new EmailType("superdude55@hotmail.com");
email.addType(EmailTypeParameter.HOME);
vcard.addEmail(email);

email = new EmailType("doe.john@company.com");
email.addType(EmailTypeParameter.WORK);
email.setPref(1); //the most preferred email
vcard.addEmail(email);
}}}

=EXPERTISE=
Defines a professional subject area that the person has knowledge of. For example, if the person is a Java software engineer, he or she might list technologies such as "servlets", "SOAP", and "Spring".

*vCard versions:* 4.0 (from [http://tools.ietf.org/html/rfc6715 RFC 6715])

*Java class:* [http://mikeangstadt.name/ezvcard/latest/index.html?ezvcard/types/ExpertiseType.html ExpertiseType]

{{{
VCard vcard = new VCard();
ExpertiseType expertise = new ExpertiseType("Java programming");
expertise.setLevel(ExpertiseLevelParameter.EXPERT);
vcard.addExpertise(expertise);
}}}

=FBURL=
A URL that shows when the person is free/busy on their calendar.

*vCard versions:* 4.0

*Java class:* [http://mikeangstadt.name/ezvcard/latest/index.html?ezvcard/types/FbUrlType.html FbUrlType]

{{{
VCard vcard = new VCard();
FbUrlType fburl = new FbUrlType("http://www.example.com/freebusy/janedoe");
vcard.addFbUrl(fburl);
}}}

=FN=
Shows how the person's name should be displayed.

*vCard versions:* 2.1, 3.0, 4.0

*Java class:* [http://mikeangstadt.name/ezvcard/latest/index.html?ezvcard/types/FormattedNameType.html FormattedNameType]

{{{
VCard vcard = new VCard();
FormattedNameType fn = new FormattedNameType("Dr. Gregory House M.D.");
vcard.setFormattedName(fn);
}}}

=GENDER=
Defines the person's sex.

*vCard versions:* 4.0

*Java class:* [http://mikeangstadt.name/ezvcard/latest/index.html?ezvcard/types/GenderType.html GenderType]

{{{
VCard vcard = new VCard();
GenderType gender = GenderType.male();
vcard.setGender(gender);
}}}

{{{
VCard vcard = ...
GenderType gender = vcard.getGender();
if (gender != null){
  if (gender.isMale()){
    ...
  } else if (gender.isFemale()){
    ...
  }
  ...
}
}}}

=GEO=
A set of latitude/longitude coordinates. There is no rule for what these coordinates must represent, but the meaning could vary depending on the value of the vCard KIND type.
 
 * "individual": the location of the person's home or workplace.
 * "group": the location of the group's meeting place.
 * "org": the coordinates of the organization's headquarters.
 * "location": the coordinates of the location itself.

*vCard versions:* 2.1, 3.0, 4.0

*Java class:* [http://mikeangstadt.name/ezvcard/latest/index.html?ezvcard/types/GeoType.html GeoType]

{{{
VCard vcard = new VCard();
GeoType geo = new GeoType(-123.456, 12.54);
vcard.setGeo(geo);
}}}

=HOBBY=
Defines a recreational activity that the person actively engages in. For example, if a person has a HOBBY of "hockey", it would mean that he likes to play hockey. Someone who just likes to _watch_ hockey would list "hockey" as an INTEREST instead.

*vCard versions:* 4.0 (from [http://tools.ietf.org/html/rfc6715 RFC 6715])

*Java class:* [http://mikeangstadt.name/ezvcard/latest/index.html?ezvcard/types/HobbyType.html HobbyType]

{{{
//someone who likes to wind surf during the summer, but rents a boat instead of owning one
VCard vcard = new VCard();
HobbyType hobby = new HobbyType("wind surfing");
hobby.setLevel(HobbyLevelParameter.LOW);
vcard.addHobby(hobby);
}}}

=IMPP=
An instant message handle.  The handle is represented as a URI in the format "`<IM-PROTOCOL>:<IM-HANDLE>`".  For example, someone with a Yahoo! Messenger handle of "jdoe@yahoo.com" would have an IMPP vCard property value of "ymsgr:jdoe@yahoo.com".

Suggested protocols (from [http://tools.ietf.org/html/rfc4770 RFC 4770]):

  * `aim:` - AOL Instant Messenger
  * `irc:` - Internet Relay Chat
  * `msn:` - MSN Messenger
  * `sip:` - Session Initiation Protocol
  * `xmpp:` - Extensible Messaging and Presence Protocol
  * `ymsgr:` - Yahoo! Messenger

*vCard versions:* 4.0

*Java class:* [http://mikeangstadt.name/ezvcard/latest/index.html?ezvcard/types/ImppType.html ImppType]

{{{
VCard vcard = new VCard();

//URI
ImppType impp = new ImppType("aim:hunkydude22@aol.com");
vcard.addImpp(impp);

//static helper constructors
impp = ImppType.msn("steve99@msn.com");
vcard.addImpp(impp);
}}}

=INTEREST=
Defines a recreational activity that the person is interested in. For example, if a person has a INTEREST of "hockey", it would mean that he likes to watch hockey games. Someone who likes to actually _play_ hockey would list "hockey" as a HOBBY instead.

*vCard versions:* 4.0 (from [http://tools.ietf.org/html/rfc6715 RFC 6715])

*Java class:* [http://mikeangstadt.name/ezvcard/latest/index.html?ezvcard/types/InterestType.html InterestType]

{{{
//someone who attends all of his favorite hockey team's games in person.
VCard vcard = new VCard();
InterestType interest = new InterestType("hockey");
interest.setLevel(InterestLevelParameter.HIGH);
vcard.addInterest(interest);
}}}

=KEY=
A public key for encryption.

*vCard versions:* 2.1, 3.0, 4.0

*Java class:* [http://mikeangstadt.name/ezvcard/latest/index.html?ezvcard/types/KeyType.html KeyType]

{{{
VCard vcard = new VCard();

//URL (vCard 4.0 only; KEYs cannot have URLs in vCard 2.1 and 3.0)
KeyType key = new KeyType("http://www.mywebsite.com/pubkey.pgp", KeyTypeParameter.PGP);
vcard.addKey(key);

//binary data
byte data[] = ...
key = new KeyType(data, KeyTypeParameter.PGP);
vcard.addKey(key);

//plain text value
key = new KeyType();
key.setText("...", KeyTypeParameter.PGP);
vcard.addKey(key);

//if "KeyTypeParameter" does not have the pre-defined constant that you need, then create a new instance
//arg 1: the value of the 2.1/3.0 TYPE parameter
//arg 2: the value to use for the 4.0 MEDIATYPE parameter and for 4.0 data URIs
//arg 3: the file extension of the data type (optional)
KeyTypeParameter param = new KeyTypeParameter("mykey", "application/my-key", "mkey");
key = new KeyType("http://www.mywebsite.com/pubkey.enc", param);
vcard.addKey(key);
}}}

{{{
VCard vcard = ...

int fileCount = 0;
for (KeyType key : vcard.getKeys()){
  //the key will have either a URL or a binary data
  //only 4.0 vCards are allowed to use URLs for keys
  if (key.getData() == null){
    System.out.println("Key URL: " + key.getUrl());
  } else {
    KeyTypeParameter type = key.getContentType();
    
    if (type == null) {
      //the vCard may not have any content type data associated with the key
      System.out.println("Saving a key file...");
    } else {
      System.out.println("Saving a \"" + type.getMediaType() + "\" file...");
    }
    
    String folder;
    if (type == KeyTypeParameter.PGP){ //it is safe to use "==" instead of "equals()"
      folder = "pgp-keys";
    } else {
      folder = "other-keys";
    }
    
    byte data[] = key.getData();
    String filename = "key" + fileCount;
    if (type != null && type.getExtension() != null){
    	filename += "." + type.getExtension();
    }
    OutputStream out = new FileOutputStream(new File(folder, filename));
    out.write(data);
    out.close();
    fileCount++;
  }
}
}}}

=KIND=
Defines the type of entity that this vCard represents, such as an individual or an organization.

*vCard versions:* 4.0

*Java class:* [http://mikeangstadt.name/ezvcard/latest/index.html?ezvcard/types/KindType.html KindType]

{{{
//use static methods to create a KindType object
VCard vcard = new VCard();
KindType kind = KindType.individual();
vcard.setKind(kind);
}}}

{{{
//use "is*" methods to determine the KindType value
VCard vcard = ...
KindType kind = vcard.getKind();
if (kind != null){
  if (kind.isIndividual()){
    ...
  } else if (kind.isGroup()){
    ...
  }
  ...
}
}}}

=LABEL=
Defines the exact text to put on the mailing label when mailing a package or letter to the person.

*vCard versions:* 2.1, 3.0, 4.0`*`

*Java class:* [http://mikeangstadt.name/ezvcard/latest/index.html?ezvcard/types/LabelType.html LabelType]

`*`The LABEL type is not supported in 4.0.  Instead, labels are included as a parameter to their corresponding ADR.  When marshalling a vCard, ez-vcard will use either the LABEL type or the LABEL parameter, depending on the requested vCard version.

Use the `AddressType.setLabel()` method to assign a label to an address.

{{{
VCard vcard = new VCard();
AddressType adr = new AddressType();
adr.setStreetAddress("123 Main St.");
adr.setLocality("Austin");
adr.setRegion("TX");
adr.setPostalCode("12345");
adr.setLabel("123 Main St.\nAustin, TX 12345"); //newlines are allowed
vcard.addAddress(adr);
}}}

The `VCard.addOrphanedLabel()` method adds a LABEL type to the vCard. However, use of this method is discouraged because it creates a LABEL type that's not associated with an address.  Also, orphaned LABELs are ignored when creating version 4.0 vCards because the LABEL type is not supported by vCard 4.0.

The `VCard.getOrphanedLabels()` method can be used after parsing a version 2.1 or 3.0 vCard to retrieve any LABEL types which the parser could not assign to an address (ADR type).  A LABEL is assigned to an ADR if the LABEL's list of TYPE parameters is identical to the ADR's list of TYPE parameters.

{{{
VCard vcard = ...
for (LabelType label : vcard.getOrphanedLabels()){
  System.out.println(label.getValue());
}
}}}

=LANG=
A language that the person reads/speaks.

*vCard versions:* 4.0

*Java class:* [http://mikeangstadt.name/ezvcard/latest/index.html?ezvcard/types/LanguageType.html LanguageType]

{{{
VCard vcard = new VCard();
LanguageType lang = new LanguageType("en");
lang.setPref(1); //most preferred
vcard.addLanguage(lang);
lang = new LanguageType("fr");
lang.setPref(2); //second-most preferred
vcard.addLanguage(lang);
}}}

=LOGO=
A company logo.

*vCard versions:* 2.1, 3.0, 4.0

*Java class:* [http://mikeangstadt.name/ezvcard/latest/index.html?ezvcard/types/LogoType.html LogoType]

{{{
VCard vcard = new VCard();

//URL
LogoType logo = new LogoType("http://www.company.com/logo.png", ImageTypeParameter.PNG);
vcard.addLogo(logo);

//binary data
byte data[] = ...
logo = new LogoType(data, ImageTypeParameter.PNG);
vcard.addLogo(logo);

//if "ImageTypeParameter" does not have the pre-defined constant that you need, then create a new instance
//arg 1: the value of the 2.1/3.0 TYPE parameter
//arg 2: the value to use for the 4.0 MEDIATYPE parameter and for 4.0 data URIs
//arg 3: the file extension of the data type (optional)
ImageKeyTypeParameter param = new ImageTypeParameter("bmp", "image/x-ms-bmp", "bmp");
logo = new LogoType("http://www.company.com/logo.bmp", param);
vcard.addLogo(logo);
}}}

{{{
VCard vcard = ...

int fileCount = 0;
for (LogoType logo : vcard.getLogos()){
  //the logo will have either a URL or a binary data
  if (logo.getData() == null){
    System.out.println("Logo URL: " + logo.getUrl());
  } else {
    ImageTypeParameter type = logo.getContentType();
    
    if (type == null) {
      //the vCard may not have any content type data associated with the logo
      System.out.println("Saving a logo file...");
    } else {
      System.out.println("Saving a \"" + type.getMediaType() + "\" file...");
    }
    
    String folder;
    if (type == ImageTypeParameter.PNG){ //it is safe to use "==" instead of "equals()"
      folder = "png-files";
    } else {
      folder = "image-files";
    }
    
    byte data[] = logo.getData();
    String filename = "logo" + fileCount;
    if (type != null && type.getExtension() != null){
    	filename += "." + type.getExtension();
    }
    OutputStream out = new FileOutputStream(new File(folder, filename));
    out.write(data);
    out.close();
    fileCount++;
  }
}
}}}

=MAILER=
The email client that the person uses.

*vCard versions:* 2.1, 3.0

*Java class:* [http://mikeangstadt.name/ezvcard/latest/index.html?ezvcard/types/MailerType.html MailerType]

{{{
VCard vcard = new VCard();
MailerType mailer = new MailerType("Thunderbird");
vcard.setMailer(mailer);
}}}

=MEMBER=
The members that make up the group.  This type can only be used if the KIND type is set to "group".

*vCard versions:* 4.0

*Java class:* [http://mikeangstadt.name/ezvcard/latest/index.html?ezvcard/types/MemberType.html MemberType]

{{{
VCard vcard = new VCard();

//KIND must be set to "group" in order to add MEMBERs
vcard.setKind(KindType.group());

MemberType member = new MemberType();
member.setUriEmail("funkyjoe@hotmail.com");
vcard.addMember(member);
member = new MemberType();
member.setUriIM("aol", "joesmoe@aol.com");
vcard.addMember(member);
member = new MemberType();
member.setUriTelephone("+1-123-555-6789");
vcard.addMember(member);
member = new MemberType();
member.setUri("urn:uuid:03a0e51f-d1aa-4385-8a53-e29025acd8af"); //references the UID from another vCard
vcard.addMember(member);
}}}

{{{
VCard vcard = ...
KindType kind = vcard.getKind();
if (kind != null){
  if (kind.isGroup()){
    System.out.println("The group's members are:");
    for (MemberType member : vcard.getMembers()){
      System.out.println(member.getUri());
    }
  }
}
}}}
  
=N=
Contains the separated components of the person's name.

Multiple instances of this type can be added *ONLY* if each instance has an ALTID parameter and the value of the ALTID parameter is the same across all instances.  However, this is a border-case; under most circumstances, you will only need to add one instance.

*vCard versions:* 2.1, 3.0, 4.0

*Java class:* [http://mikeangstadt.name/ezvcard/latest/index.html?ezvcard/types/StructuredNameType.html StructuredNameType]

{{{
VCard vcard = new VCard();
StructuredNameType n = new StructuredNameType();
n.setFamily("House");
n.setGiven("Gregory");
n.addPrefix("Dr");
n.addSuffix("MD");
vcard.setStructuredName(n);
}}}

=NAME=
Provides a textual representation of the SOURCE type.

*vCard versions:* 3.0

*Java class:* [http://mikeangstadt.name/ezvcard/latest/index.html?ezvcard/types/SourceDisplayTextType.html SourceDisplayTextType]

{{{
VCard vcard = new VCard();
SourceDisplayTextType name = new SourceDisplayTextType("My vCard");
vcard.setSourceDisplayText(name);
}}}

=NICKNAME=
A list of nicknames the person goes by.

*vCard versions:* 2.1, 3.0, 4.0

*Java class:* [http://mikeangstadt.name/ezvcard/latest/index.html?ezvcard/types/NicknameType.html NicknameType]

{{{
VCard vcard = new VCard();
NicknameType nickname = new NicknameType();
nickname.addValue("Rick");
nickname.addValue("Ricky");
nickname.addValue("Bobby");
vcard.setNickname(nickname);
}}}

=NOTE=
A free-form text field that contains miscellaneous information.

*vCard versions:* 2.1, 3.0, 4.0

*Java class:* [http://mikeangstadt.name/ezvcard/latest/index.html?ezvcard/types/NoteType.html NoteType]

{{{
VCard vcard = new VCard();
NoteType note = new NoteType("This is a\nmiscellaneous comment."); //can contain newlines
note.setLanguage("en-us");
vcard.addNote(note);
}}}

=ORG=
A list of organizations the person belongs to.  The list is ordered.  It starts with the broadest organization and ends with the most specific.

*vCard versions:* 2.1, 3.0, 4.0

*Java class:* [http://mikeangstadt.name/ezvcard/latest/index.html?ezvcard/types/OrganizationType.html OrganizationType]

{{{
VCard vcard = new VCard();
OrganizationType org = new OrganizationType();
org.addValue("Google");
org.addValue("GMail Team");
org.addValue("Spam Detection Team");
vcard.setOrganizations(org);
}}}

=ORG-DIRECTORY=
Defines a URI representing the person's work place, which can be used to lookup information on the person's co-workers.

*vCard versions:* 4.0 (from [http://tools.ietf.org/html/rfc6715 RFC 6715])

*Java class:* [http://mikeangstadt.name/ezvcard/latest/index.html?ezvcard/types/OrgDirectoryType.html OrgDirectoryType]

{{{
VCard vcard = new VCard();
OrgDirectoryType orgDirectory = new OrgDirectoryType("http://www.company.com/staff");
vcard.addOrgDirectory(orgDirectory);
}}}

=PHOTO=
A photo attached to the vCard (such as a photo of the person's face).

*vCard versions:* 2.1, 3.0, 4.0

*Java class:* [http://mikeangstadt.name/ezvcard/latest/index.html?ezvcard/types/PhotoType.html PhotoType]

{{{
VCard vcard = new VCard();

//URL
PhotoType photo = new PhotoType("http://www.mywebsite.com/mugshot.jpg", ImageTypeParameter.JPEG);
vcard.addPhoto(photo);

//binary data
byte data[] = ...
photo = new PhotoType(data, ImageTypeParameter.JPEG);
vcard.addPhoto(photo);

//if "ImageTypeParameter" does not have the pre-defined constant that you need, then create a new instance
//arg 1: the value of the 2.1/3.0 TYPE parameter
//arg 2: the value to use for the 4.0 MEDIATYPE parameter and for 4.0 data URIs
//arg 3: the file extension of the data type (optional)
ImageKeyTypeParameter param = new ImageTypeParameter("bmp", "image/x-ms-bmp", "bmp");
photo = new PhotoType("http://www.mywebsite.com/mugshot.bmp", param);
vcard.addPhoto(photo);
}}}

{{{
VCard vcard = ...

int fileCount = 0;
for (PhotoType photo : vcard.getPhotos()){
  //the photo will have either a URL or a binary data
  if (photo.getData() == null){
    System.out.println("Photo URL: " + photo.getUrl());
  } else {
    ImageTypeParameter type = photo.getContentType();
    
    if (type == null) {
      //the vCard may not have any content type data associated with the photo
      System.out.println("Saving a photo file...");
    } else {
      System.out.println("Saving a \"" + type.getMediaType() + "\" file...");
    }
    
    String folder;
    if (type == ImageTypeParameter.JPEG){ //it is safe to use "==" instead of "equals()"
      folder = "photos";
    } else {
      folder = "images";
    }
    
    byte data[] = photo.getData();
    String filename = "photo" + fileCount;
    if (type != null && type.getExtension() != null){
    	filename += "." + type.getExtension();
    }
    OutputStream out = new FileOutputStream(new File(folder, filename));
    out.write(data);
    out.close();
    fileCount++;
  }
}
}}}

=PRODID=
Defines the product that created the vCard.

*vCard versions:* 3.0, 4.0

*Java class:* [http://mikeangstadt.name/ezvcard/latest/index.html?ezvcard/types/ProdIdType.html ProdIdType]

{{{
VCard vcard = new VCard();
ProdIdType prodid = new ProdIdType("-//ONLINE DIRECTORY//NONSGML Version 1//EN");
vcard.setProdId(prodid);
}}}

=PROFILE=
Marks the vCard as being a vCard (it is generally not needed).

*vCard versions:* 3.0

*Java class:* [http://mikeangstadt.name/ezvcard/latest/index.html?ezvcard/types/ProfileType.html ProfileType]

{{{
VCard vcard = new VCard();
ProfileType profile = new ProfileType();
vcard.setProfile(profile);
}}}

=RELATED=
Other people that the person is related to.  It can contain either a URI or a plain text value.

*vCard versions:* 4.0

*Java class:* [http://mikeangstadt.name/ezvcard/latest/index.html?ezvcard/types/RelatedType.html RelatedType]

{{{
VCard vcard = new VCard();

RelatedType related = new RelatedType();
related.addType(RelatedTypeParameter.FRIEND);
related.setUri("urn:uuid:03a0e51f-d1aa-4385-8a53-e29025acd8af");
vcard.addRelated(related);

related = new RelatedType();
related.addType(RelatedTypeParameter.CO_WORKER);
related.addType(RelatedTypeParameter.FRIEND);
related.setUri("http://joesmoe.name/vcard.vcf");
vcard.addRelated(related);

related = new RelatedType();
related.addType(RelatedTypeParameter.SPOUSE);
related.setText("My wife's name is Edna Smith");
vcard.addRelated(related);
}}}

=REV=
The date that the vCard was last modified by its owner.

*vCard versions:* 2.1, 3.0, 4.0

*Java class:* [http://mikeangstadt.name/ezvcard/latest/index.html?ezvcard/types/RevisionType.html RevisionType]

{{{
VCard vcard = new VCard();
RevisionType rev = new RevisionType(new Date());
vcard.setRevision(rev);
}}}

=ROLE=
The function that the person plays in his or her organization.

*vCard versions:* 2.1, 3.0, 4.0

*Java class:* [http://mikeangstadt.name/ezvcard/latest/index.html?ezvcard/types/RoleType.html RoleType]

{{{
VCard vcard = new VCard();
RoleType role = new RoleType("Project Leader");
vcard.addRole(role);
}}}

=SORT-STRING=
Defines a string that should be used when an application sorts this vCard in some way.

*vCard versions:* 2.1, 3.0, 4.0`*`

*Java class:* [http://mikeangstadt.name/ezvcard/latest/index.html?ezvcard/types/SortStringType.html SortStringType]

`*`The SORT-STRING type is not supported in 4.0.  Instead, a SORT-AS parameter can be added to the N (`StructuredNameType`) and/or ORG (`OrganizationType`) types.

{{{
//2.1 and 3.0
VCard vcard = new VCard();
StructuredNameType n = new StructuredNameType();
n.setFamily("d'Armour");
n.setGiven("Miles");
vcard.setStructuredName(n);
SortStringType sortString = new SortStringType("Armour");
vcard.setSortString(sortString);

//4.0
VCard vcard = new VCard();
StructuredNameType n = new StructuredNameType();
n.setFamily("d'Armour");
n.setGiven("Miles");
n.setSortAs("Armour");
vcard.setStructuredName(n);
}}}

=SOUND=
A sound to attach to the vCard, such as a pronunciation of the person's name.

*vCard versions:* 2.1, 3.0, 4.0

*Java class:* [http://mikeangstadt.name/ezvcard/latest/index.html?ezvcard/types/SoundType.html SoundType]

{{{
VCard vcard = new VCard();

//URL
SoundType sound = new SoundType("http://www.mywebsite.com/myname.ogg", SoundTypeParameter.OGG);
vcard.addSound(sound);

//binary data
byte data[] = ...
sound = new SoundType(data, SoundTypeParameter.OGG);
vcard.addSound(sound);

//if "SoundTypeParameter" does not have the pre-defined constant that you need, then create a new instance
//arg 1: the value of the 2.1/3.0 TYPE parameter
//arg 2: the value to use for the 4.0 MEDIATYPE parameter and for 4.0 data URIs
//arg 3: the file extension of the data type (optional)
SoundTypeParameter param = new SoundTypeParameter("wav", "audio/wav", "wav");
sound = new SoundType("http://www.mywebsite.com/myname.wav", SoundTypeParameter.WAV);
vcard.addSound(sound);
}}}

{{{
VCard vcard = ...

int fileCount = 0;
for (SoundType sound : vcard.getSounds()){
  //the sound will have either a URL or a binary data
  if (sound.getData() == null){
    System.out.println("Sound URL: " + sound.getUrl());
  } else {
    SoundTypeParameter type = sound.getContentType();
    
    if (type == null) {
      //the vCard may not have any content type data associated with the sound
      System.out.println("Saving a sound file...");
    } else {
      System.out.println("Saving a \"" + type.getMediaType() + "\" file...");
    }
    
    String folder;
    if (type == SoundTypeParameter.OGG){ //it is safe to use "==" instead of "equals()"
      folder = "ogg-files";
    } else {
      folder = "sound-files";
    }
    
    byte data[] = sound.getData();
    String filename = "sound" + fileCount;
    if (type != null && type.getExtension() != null){
    	filename += "." + type.getExtension();
    }
    OutputStream out = new FileOutputStream(new File(folder, filename));
    out.write(data);
    out.close();
    fileCount++;
  }
}
}}}

=SOURCE=
A URL that can be used to retrieve the most up-to-date version of the person's vCard.

*vCard versions:* 3.0, 4.0

*Java class:* [http://mikeangstadt.name/ezvcard/latest/index.html?ezvcard/types/SourceType.html SourceType]

{{{
VCard vcard = new VCard();
SourceType source = new SourceType("http://www.company.com/employees/doe_john.vcf");
vcard.addSource(source);
}}}

=TEL=
A telephone number that the person can be reached at.

*vCard versions:* 2.1, 3.0, 4.0

*Java class:* [http://mikeangstadt.name/ezvcard/latest/index.html?ezvcard/types/TelephoneType.html TelephoneType]

{{{
VCard vcard = new VCard();
TelephoneType tel = new TelephoneType("+1 123-555-6789");
tel.addType(TelephoneTypeParameter.HOME);
tel.setPref(2); //the second-most preferred
vcard.addTelephoneNumber(tel);
tel = new TelephoneType("+1 800-555-9876;ext=111");
tel.addType(TelephoneTypeParameter.WORK);
tel.setPref(1); //the most preferred
vcard.addTelephoneNumber(tel);
}}}

=TZ=
Contains the timezone that the person lives/works in.

*vCard versions:* 2.1, 3.0, 4.0

*Java class:* [http://mikeangstadt.name/ezvcard/latest/index.html?ezvcard/types/TimezoneType.html TimezoneType]

{{{
VCard vcard = new VCard();
TimezoneType tz = new TimezoneType(-5, 0, "America/New_York");
vcard.addTimezone(tz);
}}}

=TITLE=
The person's position or job in his or her organization.

*vCard versions:* 2.1, 3.0, 4.0

*Java class:* [http://mikeangstadt.name/ezvcard/latest/index.html?ezvcard/types/TitleType.html TitleType]

{{{
VCard vcard = new VCard();
TitleType title = new TitleType("Research Scientist");
vcard.addTitle(title);
}}}

=UID=
A globally unique identifier of the person.

*vCard versions:* 2.1, 3.0, 4.0

*Java class:* [http://mikeangstadt.name/ezvcard/latest/index.html?ezvcard/types/UidType.html UidType]

{{{
VCard vcard = new VCard();

UidType uid = new UidType("urn:uuid:b8767877-b4a1-4c70-9acc-505d3819e519");
vcard.setUid(uid);

//generate a random UID
uid = UidType.random();
vcard.setUid(uid);
}}}

=URL=
A URL pointing to the person's homepage or business website.

*vCard versions:* 2.1, 3.0, 4.0

*Java class:* [http://mikeangstadt.name/ezvcard/latest/index.html?ezvcard/types/UrlType.html UrlType]

{{{
VCard vcard = new VCard();
UrlType url = new UrlType("http://www.company.com");
vcard.addUrl(url);
}}}

=XML=
Any XML data that is attached to the vCard.  This is used if the vCard was encoded in XML (xCard standard) and the XML document contained elements which are not part of the xCard standard.

*vCard versions:* 4.0

*Java class:* [http://mikeangstadt.name/ezvcard/latest/index.html?ezvcard/types/XmlType.html XmlType]

{{{
VCard vcard = new VCard();
XmlType xml = new XmlType("<b>Some xml</b>");
vcard.addXml(xml);
}}}